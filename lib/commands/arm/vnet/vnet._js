/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;

function beautify(jsonText) {
    var obj = JSON.parse(jsonText);
    return JSON.stringify(obj, null, 2);
}

exports.init = function (cli) {

/*
  VirtualNetworkGatewayConnections CreateOrUpdate
  --resource-group-name
  --virtual-network-gateway-connection-name
  --parameters
=============================================
{
  "etag":"",
  "authorizationKey":"",
  "virtualNetworkGateway1":{
    "etag":"",
    "ipConfigurations":[
      {
        "name":"",
        "etag":"",
        "privateIPAddress":"",
        "privateIPAllocationMethod":"",
        "subnet":{
          "id":""
        },
        "publicIPAddress":null,
        "provisioningState":"",
        "id":""
      }
    ],
    "gatewayType":"",
    "vpnType":"",
    "enableBgp":null,
    "gatewayDefaultSite":null,
    "sku":{
      "name":"",
      "tier":"",
      "capacity":null
    },
    "vpnClientConfiguration":{
      "vpnClientAddressPool":{
        "addressPrefixes":[
          ""
        ]
      },
      "vpnClientRootCertificates":[
        {
          "name":"",
          "etag":"",
          "publicCertData":"",
          "provisioningState":"",
          "id":""
        }
      ],
      "vpnClientRevokedCertificates":[
        {
          "name":"",
          "etag":"",
          "thumbprint":"",
          "provisioningState":"",
          "id":""
        }
      ]
    },
    "resourceGuid":"",
    "provisioningState":"",
    "id":"",
    "name":null,
    "type":null,
    "location":"",
    "tags":{
    }
  },
  "virtualNetworkGateway2":null,
  "localNetworkGateway2":{
    "etag":"",
    "localNetworkAddressSpace":null,
    "gatewayIpAddress":"",
    "resourceGuid":"",
    "provisioningState":"",
    "id":"",
    "name":null,
    "type":null,
    "location":"",
    "tags":{
    }
  },
  "connectionType":"",
  "routingWeight":null,
  "sharedKey":"",
  "connectionStatus":"",
  "egressBytesTransferred":null,
  "ingressBytesTransferred":null,
  "peer":null,
  "resourceGuid":"",
  "provisioningState":"",
  "id":"",
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var virtualNetworkGatewayConnectionsCreateOrUpdate = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsCreateOrUpdate.command('create-or-update [resource-group-name] [virtual-network-gateway-connection-name] [parameters]')
  .description($('Commands to manage your virtual network gateway connections by the create-or-update method.'))
  .usage('[options] <resource-group-name> <virtual-network-gateway-connection-name> <parameters>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-gateway-connection-name <virtual-network-gateway-connection-name>', $('virtual-network-gateway-connection-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkGatewayConnectionName = ' + virtualNetworkGatewayConnectionName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.createOrUpdate(resourceGroupName, virtualNetworkGatewayConnectionName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualNetworkGatewayConnectionsCreateOrUpdatecreateOrUpdateParameters2 = virtualNetworkGatewayConnectionsCreateOrUpdate.category('create-or-update-parameters')
  .description($('Commands to generate parameter input file for your virtual network gateway connections.'));
  virtualNetworkGatewayConnectionsCreateOrUpdatecreateOrUpdateParameters2.command('generate')
  .description($('Generate virtualNetworkGatewayConnectionsCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"etag\":\"\",\"authorizationKey\":\"\",\"virtualNetworkGateway1\":{\"etag\":\"\",\"ipConfigurations\":[{\"name\":\"\",\"etag\":\"\",\"privateIPAddress\":\"\",\"privateIPAllocationMethod\":\"\",\"subnet\":{\"id\":\"\"},\"publicIPAddress\":null,\"provisioningState\":\"\",\"id\":\"\"}],\"gatewayType\":\"\",\"vpnType\":\"\",\"enableBgp\":null,\"gatewayDefaultSite\":null,\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"vpnClientConfiguration\":{\"vpnClientAddressPool\":{\"addressPrefixes\":[\"\"]},\"vpnClientRootCertificates\":[{\"name\":\"\",\"etag\":\"\",\"publicCertData\":\"\",\"provisioningState\":\"\",\"id\":\"\"}],\"vpnClientRevokedCertificates\":[{\"name\":\"\",\"etag\":\"\",\"thumbprint\":\"\",\"provisioningState\":\"\",\"id\":\"\"}]},\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}},\"virtualNetworkGateway2\":null,\"localNetworkGateway2\":{\"etag\":\"\",\"localNetworkAddressSpace\":null,\"gatewayIpAddress\":\"\",\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}},\"connectionType\":\"\",\"routingWeight\":null,\"sharedKey\":\"\",\"connectionStatus\":\"\",\"egressBytesTransferred\":null,\"ingressBytesTransferred\":null,\"peer\":null,\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualNetworkGatewayConnectionsCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"etag\":\"\",\r\n\"authorizationKey\":\"\",\r\n\"virtualNetworkGateway1\":{\r\n\"etag\":\"\",\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"privateIPAddress\":\"\",\r\n\"privateIPAllocationMethod\":\"\",\r\n\"subnet\":{\r\n\"id\":\"\"\r\n},\r\n\"publicIPAddress\":null,\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"gatewayType\":\"\",\r\n\"vpnType\":\"\",\r\n\"enableBgp\":null,\r\n\"gatewayDefaultSite\":null,\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"vpnClientConfiguration\":{\r\n\"vpnClientAddressPool\":{\r\n\"addressPrefixes\":[\r\n\"\"\r\n]\r\n},\r\n\"vpnClientRootCertificates\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"publicCertData\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"vpnClientRevokedCertificates\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"thumbprint\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n},\r\n\"virtualNetworkGateway2\":null,\r\n\"localNetworkGateway2\":{\r\n\"etag\":\"\",\r\n\"localNetworkAddressSpace\":null,\r\n\"gatewayIpAddress\":\"\",\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n},\r\n\"connectionType\":\"\",\r\n\"routingWeight\":null,\r\n\"sharedKey\":\"\",\r\n\"connectionStatus\":\"\",\r\n\"egressBytesTransferred\":null,\r\n\"ingressBytesTransferred\":null,\r\n\"peer\":null,\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualNetworkGatewayConnectionsCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch virtualNetworkGatewayConnectionsCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.command('set')
  .description($('Set virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Set the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Set the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Set the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Set the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Set the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Set the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Set the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Set the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Set the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Set the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Set the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = options.path + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = options.path + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = options.path + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = options.path + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.command('remove')
  .description($('Remove virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--authorization-key', $('Remove the authorization-key value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--local-network-gateway', $('Remove the local-network-gateway value.'))
  .option('--connection-type', $('Remove the connection-type value.'))
  .option('--routing-weight', $('Remove the routing-weight value.'))
  .option('--shared-key', $('Remove the shared-key value.'))
  .option('--connection-status', $('Remove the connection-status value.'))
  .option('--egress-bytes-transferred', $('Remove the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred', $('Remove the ingress-bytes-transferred value.'))
  .option('--peer', $('Remove the peer value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.etag || options.authorizationKey || options.virtualNetworkGateway1 || options.virtualNetworkGateway2 || options.localNetworkGateway2 || options.connectionType || options.routingWeight || options.sharedKey || options.connectionStatus || options.egressBytesTransferred || options.ingressBytesTransferred || options.peer || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.authorizationKey) {
        subItemPath = options.path + '/authorizationKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway1) {
        subItemPath = options.path + '/virtualNetworkGateway1';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway2) {
        subItemPath = options.path + '/virtualNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkGateway2) {
        subItemPath = options.path + '/localNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionType) {
        subItemPath = options.path + '/connectionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routingWeight) {
        subItemPath = options.path + '/routingWeight';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sharedKey) {
        subItemPath = options.path + '/sharedKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionStatus) {
        subItemPath = options.path + '/connectionStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.egressBytesTransferred) {
        subItemPath = options.path + '/egressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ingressBytesTransferred) {
        subItemPath = options.path + '/ingressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.peer) {
        subItemPath = options.path + '/peer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.command('add')
  .description($('Add virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Add the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Add the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Add the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Add the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Add the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Add the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Add the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Add the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Add the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Add the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Add the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '' + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = '' + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = '' + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = '' + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = '' + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = '' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.command('remove')
  .description($('Remove gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.command('add')
  .description($('Add gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.command('set')
  .description($('Set sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/sku';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.command('remove')
  .description($('Remove sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.command('add')
  .description($('Add sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/sku' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/sku' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.command('set')
  .description($('Set vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Set the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Set the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Set the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var paramPath = options.path + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = options.path + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = options.path + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.command('remove')
  .description($('Remove vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vpn-client-address-pool', $('Remove the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates', $('Remove the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates', $('Remove the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var anySubItem = false || options.vpnClientAddressPool || options.vpnClientRootCertificates || options.vpnClientRevokedCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vpnClientAddressPool) {
        subItemPath = options.path + '/vpnClientAddressPool';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRootCertificates) {
        subItemPath = options.path + '/vpnClientRootCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRevokedCertificates) {
        subItemPath = options.path + '/vpnClientRevokedCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.command('add')
  .description($('Add vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Add the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Add the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Add the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.command('set')
  .description($('Set vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Set the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var paramPath = options.path + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.command('remove')
  .description($('Remove vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address-prefixes', $('Remove the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var anySubItem = false || options.addressPrefixes;
    if (anySubItem) {
      var subItemPath = null;
      if (options.addressPrefixes) {
        subItemPath = options.path + '/addressPrefixes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.command('add')
  .description($('Add vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Add the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.command('set')
  .description($('Set address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.command('remove')
  .description($('Remove address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.command('add')
  .description($('Add address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.command('set')
  .description($('Set vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Set the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.command('remove')
  .description($('Remove vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--public-cert-data', $('Remove the public-cert-data value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.publicCertData || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicCertData) {
        subItemPath = options.path + '/publicCertData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.command('add')
  .description($('Add vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Add the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.command('set')
  .description($('Set vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.command('remove')
  .description($('Remove vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.thumbprint || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.command('add')
  .description($('Add vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.command('set')
  .description($('Set virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Set the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Set the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Set the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Set the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Set the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Set the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Set the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Set the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Set the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Set the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Set the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = options.path + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = options.path + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = options.path + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = options.path + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.command('remove')
  .description($('Remove virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--authorization-key', $('Remove the authorization-key value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--local-network-gateway', $('Remove the local-network-gateway value.'))
  .option('--connection-type', $('Remove the connection-type value.'))
  .option('--routing-weight', $('Remove the routing-weight value.'))
  .option('--shared-key', $('Remove the shared-key value.'))
  .option('--connection-status', $('Remove the connection-status value.'))
  .option('--egress-bytes-transferred', $('Remove the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred', $('Remove the ingress-bytes-transferred value.'))
  .option('--peer', $('Remove the peer value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.etag || options.authorizationKey || options.virtualNetworkGateway1 || options.virtualNetworkGateway2 || options.localNetworkGateway2 || options.connectionType || options.routingWeight || options.sharedKey || options.connectionStatus || options.egressBytesTransferred || options.ingressBytesTransferred || options.peer || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.authorizationKey) {
        subItemPath = options.path + '/authorizationKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway1) {
        subItemPath = options.path + '/virtualNetworkGateway1';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway2) {
        subItemPath = options.path + '/virtualNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkGateway2) {
        subItemPath = options.path + '/localNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionType) {
        subItemPath = options.path + '/connectionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routingWeight) {
        subItemPath = options.path + '/routingWeight';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sharedKey) {
        subItemPath = options.path + '/sharedKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionStatus) {
        subItemPath = options.path + '/connectionStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.egressBytesTransferred) {
        subItemPath = options.path + '/egressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ingressBytesTransferred) {
        subItemPath = options.path + '/ingressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.peer) {
        subItemPath = options.path + '/peer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.command('add')
  .description($('Add virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Add the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Add the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Add the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Add the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Add the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Add the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Add the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Add the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Add the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Add the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Add the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '' + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = '' + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = '' + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = '' + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = '' + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = '' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.command('remove')
  .description($('Remove gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.command('add')
  .description($('Add gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.command('set')
  .description($('Set sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/sku';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.command('remove')
  .description($('Remove sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.command('add')
  .description($('Add sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/sku' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/sku' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.command('set')
  .description($('Set vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Set the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Set the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Set the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var paramPath = options.path + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = options.path + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = options.path + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.command('remove')
  .description($('Remove vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vpn-client-address-pool', $('Remove the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates', $('Remove the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates', $('Remove the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var anySubItem = false || options.vpnClientAddressPool || options.vpnClientRootCertificates || options.vpnClientRevokedCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vpnClientAddressPool) {
        subItemPath = options.path + '/vpnClientAddressPool';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRootCertificates) {
        subItemPath = options.path + '/vpnClientRootCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRevokedCertificates) {
        subItemPath = options.path + '/vpnClientRevokedCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.command('add')
  .description($('Add vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Add the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Add the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Add the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.command('set')
  .description($('Set vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Set the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var paramPath = options.path + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.command('remove')
  .description($('Remove vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address-prefixes', $('Remove the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var anySubItem = false || options.addressPrefixes;
    if (anySubItem) {
      var subItemPath = null;
      if (options.addressPrefixes) {
        subItemPath = options.path + '/addressPrefixes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.command('add')
  .description($('Add vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Add the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.command('set')
  .description($('Set address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.command('remove')
  .description($('Remove address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.command('add')
  .description($('Add address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.command('set')
  .description($('Set vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Set the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.command('remove')
  .description($('Remove vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--public-cert-data', $('Remove the public-cert-data value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.publicCertData || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicCertData) {
        subItemPath = options.path + '/publicCertData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.command('add')
  .description($('Add vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Add the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.command('set')
  .description($('Set vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.command('remove')
  .description($('Remove vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.thumbprint || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.command('add')
  .description($('Add vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway2" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway2';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway2" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.command('set')
  .description($('Set local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Set the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Set the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localNetworkGateway2';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = options.path + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.command('remove')
  .description($('Remove local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--local-network-address-space', $('Remove the local-network-address-space value.'))
  .option('--gateway-ip-address', $('Remove the gateway-ip-address value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2';
    var anySubItem = false || options.etag || options.localNetworkAddressSpace || options.gatewayIpAddress || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkAddressSpace) {
        subItemPath = options.path + '/localNetworkAddressSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayIpAddress) {
        subItemPath = options.path + '/gatewayIpAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.command('add')
  .description($('Add local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Add the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Add the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localNetworkGateway2' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.command('set')
  .description($('Set local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Set the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Set the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localNetworkGateway2';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = options.path + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.command('remove')
  .description($('Remove local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--local-network-address-space', $('Remove the local-network-address-space value.'))
  .option('--gateway-ip-address', $('Remove the gateway-ip-address value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2';
    var anySubItem = false || options.etag || options.localNetworkAddressSpace || options.gatewayIpAddress || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkAddressSpace) {
        subItemPath = options.path + '/localNetworkAddressSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayIpAddress) {
        subItemPath = options.path + '/gatewayIpAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.command('add')
  .description($('Add local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Add the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Add the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localNetworkGateway2' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-address-space
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.category('local-network-address-space')
  .description($('Commands to set/remove/add local-network-address-space of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.command('remove')
  .description($('Remove local-network-address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkAddressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2/localNetworkAddressSpace';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-address-space
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.category('local-network-address-space')
  .description($('Commands to set/remove/add local-network-address-space of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.command('add')
  .description($('Add local-network-address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkAddressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2/localNetworkAddressSpace' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.command('set')
  .description($('Set virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Set the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Set the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Set the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Set the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Set the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Set the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Set the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Set the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Set the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Set the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Set the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = options.path + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = options.path + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = options.path + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = options.path + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.command('remove')
  .description($('Remove virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--authorization-key', $('Remove the authorization-key value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--local-network-gateway', $('Remove the local-network-gateway value.'))
  .option('--connection-type', $('Remove the connection-type value.'))
  .option('--routing-weight', $('Remove the routing-weight value.'))
  .option('--shared-key', $('Remove the shared-key value.'))
  .option('--connection-status', $('Remove the connection-status value.'))
  .option('--egress-bytes-transferred', $('Remove the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred', $('Remove the ingress-bytes-transferred value.'))
  .option('--peer', $('Remove the peer value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.etag || options.authorizationKey || options.virtualNetworkGateway1 || options.virtualNetworkGateway2 || options.localNetworkGateway2 || options.connectionType || options.routingWeight || options.sharedKey || options.connectionStatus || options.egressBytesTransferred || options.ingressBytesTransferred || options.peer || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.authorizationKey) {
        subItemPath = options.path + '/authorizationKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway1) {
        subItemPath = options.path + '/virtualNetworkGateway1';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway2) {
        subItemPath = options.path + '/virtualNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkGateway2) {
        subItemPath = options.path + '/localNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionType) {
        subItemPath = options.path + '/connectionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routingWeight) {
        subItemPath = options.path + '/routingWeight';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sharedKey) {
        subItemPath = options.path + '/sharedKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionStatus) {
        subItemPath = options.path + '/connectionStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.egressBytesTransferred) {
        subItemPath = options.path + '/egressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ingressBytesTransferred) {
        subItemPath = options.path + '/ingressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.peer) {
        subItemPath = options.path + '/peer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.command('add')
  .description($('Add virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Add the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Add the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Add the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Add the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Add the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Add the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Add the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Add the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Add the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Add the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Add the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '' + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = '' + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = '' + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = '' + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = '' + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = '' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.command('remove')
  .description($('Remove gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.command('add')
  .description($('Add gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.command('set')
  .description($('Set sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/sku';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.command('remove')
  .description($('Remove sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.command('add')
  .description($('Add sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/sku' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/sku' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.command('set')
  .description($('Set vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Set the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Set the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Set the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var paramPath = options.path + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = options.path + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = options.path + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.command('remove')
  .description($('Remove vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vpn-client-address-pool', $('Remove the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates', $('Remove the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates', $('Remove the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var anySubItem = false || options.vpnClientAddressPool || options.vpnClientRootCertificates || options.vpnClientRevokedCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vpnClientAddressPool) {
        subItemPath = options.path + '/vpnClientAddressPool';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRootCertificates) {
        subItemPath = options.path + '/vpnClientRootCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRevokedCertificates) {
        subItemPath = options.path + '/vpnClientRevokedCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.command('add')
  .description($('Add vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Add the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Add the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Add the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.command('set')
  .description($('Set vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Set the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var paramPath = options.path + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.command('remove')
  .description($('Remove vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address-prefixes', $('Remove the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var anySubItem = false || options.addressPrefixes;
    if (anySubItem) {
      var subItemPath = null;
      if (options.addressPrefixes) {
        subItemPath = options.path + '/addressPrefixes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.command('add')
  .description($('Add vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Add the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.command('set')
  .description($('Set address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.command('remove')
  .description($('Remove address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.command('add')
  .description($('Add address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.command('set')
  .description($('Set vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Set the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.command('remove')
  .description($('Remove vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--public-cert-data', $('Remove the public-cert-data value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.publicCertData || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicCertData) {
        subItemPath = options.path + '/publicCertData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.command('add')
  .description($('Add vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Add the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.command('set')
  .description($('Set vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.command('remove')
  .description($('Remove vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.thumbprint || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.command('add')
  .description($('Add vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection0.command('set')
  .description($('Set virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Set the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Set the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Set the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Set the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Set the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Set the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Set the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Set the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Set the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Set the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Set the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = options.path + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = options.path + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = options.path + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = options.path + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = options.path + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = options.path + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = options.path + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection1.command('remove')
  .description($('Remove virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--authorization-key', $('Remove the authorization-key value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--virtual-network-gateway', $('Remove the virtual-network-gateway value.'))
  .option('--local-network-gateway', $('Remove the local-network-gateway value.'))
  .option('--connection-type', $('Remove the connection-type value.'))
  .option('--routing-weight', $('Remove the routing-weight value.'))
  .option('--shared-key', $('Remove the shared-key value.'))
  .option('--connection-status', $('Remove the connection-status value.'))
  .option('--egress-bytes-transferred', $('Remove the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred', $('Remove the ingress-bytes-transferred value.'))
  .option('--peer', $('Remove the peer value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.etag || options.authorizationKey || options.virtualNetworkGateway1 || options.virtualNetworkGateway2 || options.localNetworkGateway2 || options.connectionType || options.routingWeight || options.sharedKey || options.connectionStatus || options.egressBytesTransferred || options.ingressBytesTransferred || options.peer || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.authorizationKey) {
        subItemPath = options.path + '/authorizationKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway1) {
        subItemPath = options.path + '/virtualNetworkGateway1';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualNetworkGateway2) {
        subItemPath = options.path + '/virtualNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkGateway2) {
        subItemPath = options.path + '/localNetworkGateway2';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionType) {
        subItemPath = options.path + '/connectionType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routingWeight) {
        subItemPath = options.path + '/routingWeight';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sharedKey) {
        subItemPath = options.path + '/sharedKey';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.connectionStatus) {
        subItemPath = options.path + '/connectionStatus';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.egressBytesTransferred) {
        subItemPath = options.path + '/egressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ingressBytesTransferred) {
        subItemPath = options.path + '/ingressBytesTransferred';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.peer) {
        subItemPath = options.path + '/peer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway-connection
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.category('virtual-network-gateway-connection')
  .description($('Commands to set/remove/add virtual-network-gateway-connection of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGatewayConnection2.command('add')
  .description($('Add virtual-network-gateway-connection in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "authorizationKey":"",\r\n  "virtualNetworkGateway1":{\r\n    "etag":"",\r\n    "ipConfigurations":[\r\n      {\r\n        "name":"",\r\n        "etag":"",\r\n        "privateIPAddress":"",\r\n        "privateIPAllocationMethod":"",\r\n        "subnet":{\r\n          "id":""\r\n        },\r\n        "publicIPAddress":null,\r\n        "provisioningState":"",\r\n        "id":""\r\n      }\r\n    ],\r\n    "gatewayType":"",\r\n    "vpnType":"",\r\n    "enableBgp":null,\r\n    "gatewayDefaultSite":null,\r\n    "sku":{\r\n      "name":"",\r\n      "tier":"",\r\n      "capacity":null\r\n    },\r\n    "vpnClientConfiguration":{\r\n      "vpnClientAddressPool":{\r\n        "addressPrefixes":[\r\n          ""\r\n        ]\r\n      },\r\n      "vpnClientRootCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "publicCertData":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ],\r\n      "vpnClientRevokedCertificates":[\r\n        {\r\n          "name":"",\r\n          "etag":"",\r\n          "thumbprint":"",\r\n          "provisioningState":"",\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "virtualNetworkGateway2":null,\r\n  "localNetworkGateway2":{\r\n    "etag":"",\r\n    "localNetworkAddressSpace":null,\r\n    "gatewayIpAddress":"",\r\n    "resourceGuid":"",\r\n    "provisioningState":"",\r\n    "id":"",\r\n    "name":null,\r\n    "type":null,\r\n    "location":"",\r\n    "tags":{\r\n    }\r\n  },\r\n  "connectionType":"",\r\n  "routingWeight":null,\r\n  "sharedKey":"",\r\n  "connectionStatus":"",\r\n  "egressBytesTransferred":null,\r\n  "ingressBytesTransferred":null,\r\n  "peer":null,\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--authorization-key <authorizationKey>', $('Add the authorization-key value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway1>', $('Add the virtual-network-gateway value.'))
  .option('--virtual-network-gateway <virtualNetworkGateway2>', $('Add the virtual-network-gateway value.'))
  .option('--local-network-gateway <localNetworkGateway2>', $('Add the local-network-gateway value.'))
  .option('--connection-type <connectionType>', $('Add the connection-type value.'))
  .option('--routing-weight <routingWeight>', $('Add the routing-weight value.'))
  .option('--shared-key <sharedKey>', $('Add the shared-key value.'))
  .option('--connection-status <connectionStatus>', $('Add the connection-status value.'))
  .option('--egress-bytes-transferred <egressBytesTransferred>', $('Add the egress-bytes-transferred value.'))
  .option('--ingress-bytes-transferred <ingressBytesTransferred>', $('Add the ingress-bytes-transferred value.'))
  .option('--peer <peer>', $('Add the peer value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '' + '/' + 'authorizationKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.authorizationKey) {
      if (options.parse && options.authorizationKey) {
        options.authorizationKey = JSON.parse(options.authorizationKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.authorizationKey}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway1';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway1) {
      if (options.parse && options.virtualNetworkGateway1) {
        options.virtualNetworkGateway1 = JSON.parse(options.virtualNetworkGateway1);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway1}]);
    }
    paramPath = '' + '/' + 'virtualNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualNetworkGateway2) {
      if (options.parse && options.virtualNetworkGateway2) {
        options.virtualNetworkGateway2 = JSON.parse(options.virtualNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'localNetworkGateway2';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkGateway2) {
      if (options.parse && options.localNetworkGateway2) {
        options.localNetworkGateway2 = JSON.parse(options.localNetworkGateway2);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkGateway2}]);
    }
    paramPath = '' + '/' + 'connectionType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionType) {
      if (options.parse && options.connectionType) {
        options.connectionType = JSON.parse(options.connectionType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionType}]);
    }
    paramPath = '' + '/' + 'routingWeight';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routingWeight) {
      if (options.parse && options.routingWeight) {
        options.routingWeight = JSON.parse(options.routingWeight);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routingWeight}]);
    }
    paramPath = '' + '/' + 'sharedKey';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sharedKey) {
      if (options.parse && options.sharedKey) {
        options.sharedKey = JSON.parse(options.sharedKey);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sharedKey}]);
    }
    paramPath = '' + '/' + 'connectionStatus';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.connectionStatus) {
      if (options.parse && options.connectionStatus) {
        options.connectionStatus = JSON.parse(options.connectionStatus);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.connectionStatus}]);
    }
    paramPath = '' + '/' + 'egressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.egressBytesTransferred) {
      if (options.parse && options.egressBytesTransferred) {
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      }
        options.egressBytesTransferred = JSON.parse(options.egressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.egressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'ingressBytesTransferred';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ingressBytesTransferred) {
      if (options.parse && options.ingressBytesTransferred) {
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      }
        options.ingressBytesTransferred = JSON.parse(options.ingressBytesTransferred);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ingressBytesTransferred}]);
    }
    paramPath = '' + '/' + 'peer';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.peer) {
      if (options.parse && options.peer) {
        options.peer = JSON.parse(options.peer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.peer}]);
    }
    paramPath = '' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway10.command('set')
  .description($('Set virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Set the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Set the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Set the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Set the gateway-default-site value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Set the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = options.path + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = options.path + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = options.path + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = options.path + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway11.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--gateway-type', $('Remove the gateway-type value.'))
  .option('--vpn-type', $('Remove the vpn-type value.'))
  .option('--enable-bgp', $('Remove the enable-bgp value.'))
  .option('--gateway-default-site', $('Remove the gateway-default-site value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--vpn-client-configuration', $('Remove the vpn-client-configuration value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1';
    var anySubItem = false || options.etag || options.ipConfigurations || options.gatewayType || options.vpnType || options.enableBgp || options.gatewayDefaultSite || options.sku || options.vpnClientConfiguration || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayType) {
        subItemPath = options.path + '/gatewayType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnType) {
        subItemPath = options.path + '/vpnType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableBgp) {
        subItemPath = options.path + '/enableBgp';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayDefaultSite) {
        subItemPath = options.path + '/gatewayDefaultSite';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientConfiguration) {
        subItemPath = options.path + '/vpnClientConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway12.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway1" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--gateway-type <gatewayType>', $('Add the gateway-type value.'))
  .option('--vpn-type <vpnType>', $('Add the vpn-type value.'))
  .option('--enable-bgp <enableBgp>', $('Add the enable-bgp value.'))
  .option('--gateway-default-site <gatewayDefaultSite>', $('Add the gateway-default-site value.'))
  .option('--sku <sku>', $('Add the sku value.'))
  .option('--vpn-client-configuration <vpnClientConfiguration>', $('Add the vpn-client-configuration value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayType) {
      if (options.parse && options.gatewayType) {
        options.gatewayType = JSON.parse(options.gatewayType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnType) {
      if (options.parse && options.vpnType) {
        options.vpnType = JSON.parse(options.vpnType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnType}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'enableBgp';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableBgp) {
      if (options.parse && options.enableBgp) {
        options.enableBgp = JSON.parse(options.enableBgp);
      }
        options.enableBgp = JSON.parse(options.enableBgp);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableBgp}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'gatewayDefaultSite';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayDefaultSite) {
      if (options.parse && options.gatewayDefaultSite) {
        options.gatewayDefaultSite = JSON.parse(options.gatewayDefaultSite);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayDefaultSite}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'sku';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sku) {
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'vpnClientConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientConfiguration) {
      if (options.parse && options.vpnClientConfiguration) {
        options.vpnClientConfiguration = JSON.parse(options.vpnClientConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientConfiguration}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/virtualNetworkGateway1' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet0.command('set')
  .description($('Set subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite1.command('remove')
  .description($('Remove gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add gateway-default-site
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.category('gateway-default-site')
  .description($('Commands to set/remove/add gateway-default-site of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsGatewayDefaultSite2.command('add')
  .description($('Add gateway-default-site in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "gatewayDefaultSite" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/gatewayDefaultSite' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku0.command('set')
  .description($('Set sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/sku';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku1.command('remove')
  .description($('Remove sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add sku
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.category('sku')
  .description($('Commands to set/remove/add sku of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsSku2.command('add')
  .description($('Add sku in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--tier <tier>', $('Add the tier value.'))
  .option('--capacity <capacity>', $('Add the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/sku' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/sku' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'tier';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tier) {
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = '/virtualNetworkGateway1/sku' + '/' + 'capacity';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.capacity) {
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration0.command('set')
  .description($('Set vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Set the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Set the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Set the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var paramPath = options.path + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = options.path + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = options.path + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration1.command('remove')
  .description($('Remove vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--vpn-client-address-pool', $('Remove the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates', $('Remove the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates', $('Remove the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration';
    var anySubItem = false || options.vpnClientAddressPool || options.vpnClientRootCertificates || options.vpnClientRevokedCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.vpnClientAddressPool) {
        subItemPath = options.path + '/vpnClientAddressPool';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRootCertificates) {
        subItemPath = options.path + '/vpnClientRootCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vpnClientRevokedCertificates) {
        subItemPath = options.path + '/vpnClientRevokedCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-configuration
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.category('vpn-client-configuration')
  .description($('Commands to set/remove/add vpn-client-configuration of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientConfiguration2.command('add')
  .description($('Add vpn-client-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientConfiguration" : {\r\n             "vpnClientAddressPool":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "vpnClientRootCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "publicCertData":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "vpnClientRevokedCertificates":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "thumbprint":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--vpn-client-address-pool <vpnClientAddressPool>', $('Add the vpn-client-address-pool value.'))
  .option('--vpn-client-root-certificates <vpnClientRootCertificates>', $('Add the vpn-client-root-certificates value.'))
  .option('--vpn-client-revoked-certificates <vpnClientRevokedCertificates>', $('Add the vpn-client-revoked-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientAddressPool';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientAddressPool) {
      if (options.parse && options.vpnClientAddressPool) {
        options.vpnClientAddressPool = JSON.parse(options.vpnClientAddressPool);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientAddressPool}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRootCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRootCertificates) {
      if (options.parse && options.vpnClientRootCertificates) {
        options.vpnClientRootCertificates = JSON.parse(options.vpnClientRootCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRootCertificates}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration' + '/' + 'vpnClientRevokedCertificates';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.vpnClientRevokedCertificates) {
      if (options.parse && options.vpnClientRevokedCertificates) {
        options.vpnClientRevokedCertificates = JSON.parse(options.vpnClientRevokedCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vpnClientRevokedCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool0.command('set')
  .description($('Set vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Set the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var paramPath = options.path + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool1.command('remove')
  .description($('Remove vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address-prefixes', $('Remove the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool';
    var anySubItem = false || options.addressPrefixes;
    if (anySubItem) {
      var subItemPath = null;
      if (options.addressPrefixes) {
        subItemPath = options.path + '/addressPrefixes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-address-pool
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.category('vpn-client-address-pool')
  .description($('Commands to set/remove/add vpn-client-address-pool of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientAddressPool2.command('add')
  .description($('Add vpn-client-address-pool in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientAddressPool" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Add the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool' + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes0.command('set')
  .description($('Set address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes1.command('remove')
  .description($('Remove address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-prefixes
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsAddressPrefixes2.command('add')
  .description($('Add address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientAddressPool/addressPrefixes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates0.command('set')
  .description($('Set vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Set the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates1.command('remove')
  .description($('Remove vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--public-cert-data', $('Remove the public-cert-data value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.publicCertData || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicCertData) {
        subItemPath = options.path + '/publicCertData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-root-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.category('vpn-client-root-certificates')
  .description($('Commands to set/remove/add vpn-client-root-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRootCertificates2.command('add')
  .description($('Add vpn-client-root-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRootCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "publicCertData":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--public-cert-data <publicCertData>', $('Add the public-cert-data value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'publicCertData';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicCertData) {
      if (options.parse && options.publicCertData) {
        options.publicCertData = JSON.parse(options.publicCertData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicCertData}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRootCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates0.command('set')
  .description($('Set vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--thumbprint <thumbprint>', $('Set the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates1.command('remove')
  .description($('Remove vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--thumbprint', $('Remove the thumbprint value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.thumbprint || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.thumbprint) {
        subItemPath = options.path + '/thumbprint';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add vpn-client-revoked-certificates
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.category('vpn-client-revoked-certificates')
  .description($('Commands to set/remove/add vpn-client-revoked-certificates of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVpnClientRevokedCertificates2.command('add')
  .description($('Add vpn-client-revoked-certificates in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "vpnClientRevokedCertificates" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "thumbprint":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--thumbprint <thumbprint>', $('Add the thumbprint value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'thumbprint';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.thumbprint) {
      if (options.parse && options.thumbprint) {
        options.thumbprint = JSON.parse(options.thumbprint);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.thumbprint}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/virtualNetworkGateway1/vpnClientConfiguration/vpnClientRevokedCertificates' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway21.command('remove')
  .description($('Remove virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway2" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualNetworkGateway2';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.category('virtual-network-gateway')
  .description($('Commands to set/remove/add virtual-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsVirtualNetworkGateway22.command('add')
  .description($('Add virtual-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualNetworkGateway2" : {\r\n             "etag":"",\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "gatewayType":"",\r\n             "vpnType":"",\r\n             "enableBgp":null,\r\n             "gatewayDefaultSite":null,\r\n             "sku":{\r\n               "name":"",\r\n               "tier":"",\r\n               "capacity":null\r\n             },\r\n             "vpnClientConfiguration":{\r\n               "vpnClientAddressPool":{\r\n                 "addressPrefixes":[\r\n                   ""\r\n                 ]\r\n               },\r\n               "vpnClientRootCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "publicCertData":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "vpnClientRevokedCertificates":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "thumbprint":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/virtualNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.command('set')
  .description($('Set local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Set the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Set the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localNetworkGateway2';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = options.path + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.command('remove')
  .description($('Remove local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--local-network-address-space', $('Remove the local-network-address-space value.'))
  .option('--gateway-ip-address', $('Remove the gateway-ip-address value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2';
    var anySubItem = false || options.etag || options.localNetworkAddressSpace || options.gatewayIpAddress || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkAddressSpace) {
        subItemPath = options.path + '/localNetworkAddressSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayIpAddress) {
        subItemPath = options.path + '/gatewayIpAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.command('add')
  .description($('Add local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Add the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Add the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localNetworkGateway2' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway20.command('set')
  .description($('Set local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Set the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Set the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/localNetworkGateway2';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = options.path + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway21.command('remove')
  .description($('Remove local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--local-network-address-space', $('Remove the local-network-address-space value.'))
  .option('--gateway-ip-address', $('Remove the gateway-ip-address value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2';
    var anySubItem = false || options.etag || options.localNetworkAddressSpace || options.gatewayIpAddress || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.localNetworkAddressSpace) {
        subItemPath = options.path + '/localNetworkAddressSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.gatewayIpAddress) {
        subItemPath = options.path + '/gatewayIpAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-gateway
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.category('local-network-gateway')
  .description($('Commands to set/remove/add local-network-gateway of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkGateway22.command('add')
  .description($('Add local-network-gateway in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkGateway2" : {\r\n             "etag":"",\r\n             "localNetworkAddressSpace":{\r\n               "addressPrefixes":[\r\n                 ""\r\n               ]\r\n             },\r\n             "gatewayIpAddress":"",\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--local-network-address-space <localNetworkAddressSpace>', $('Add the local-network-address-space value.'))
  .option('--gateway-ip-address <gatewayIpAddress>', $('Add the gateway-ip-address value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/localNetworkGateway2' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'localNetworkAddressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.localNetworkAddressSpace) {
      if (options.parse && options.localNetworkAddressSpace) {
        options.localNetworkAddressSpace = JSON.parse(options.localNetworkAddressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.localNetworkAddressSpace}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'gatewayIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.gatewayIpAddress) {
      if (options.parse && options.gatewayIpAddress) {
        options.gatewayIpAddress = JSON.parse(options.gatewayIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.gatewayIpAddress}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/localNetworkGateway2' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove local-network-address-space
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.category('local-network-address-space')
  .description($('Commands to set/remove/add local-network-address-space of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace1.command('remove')
  .description($('Remove local-network-address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkAddressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/localNetworkGateway2/localNetworkAddressSpace';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add local-network-address-space
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.category('local-network-address-space')
  .description($('Commands to set/remove/add local-network-address-space of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsLocalNetworkAddressSpace2.command('add')
  .description($('Add local-network-address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "localNetworkAddressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/localNetworkGateway2/localNetworkAddressSpace' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove peer
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1.category('peer')
  .description($('Commands to set/remove/add peer of virtual-network-gateway-connections in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer1.command('remove')
  .description($('Remove peer in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "peer" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/peer';
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add peer
  var catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2 = cli.category('virtual-network-gateway-connections');
  var parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2 = catparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2 = parametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2.category('peer')
  .description($('Commands to set/remove/add peer of virtual-network-gateway-connections in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworkGatewayConnectionsPeer2.command('add')
  .description($('Add peer in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "peer" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/peer' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualNetworkGatewayConnections Delete
  --resource-group-name
  --virtual-network-gateway-connection-name
*/
  var virtualNetworkGatewayConnectionsDelete = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsDelete.command('delete [resource-group-name] [virtual-network-gateway-connection-name]')
  .description($('Commands to manage your virtual network gateway connections by the delete method.'))
  .usage('[options] <resource-group-name> <virtual-network-gateway-connection-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-gateway-connection-name <virtual-network-gateway-connection-name>', $('virtual-network-gateway-connection-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkGatewayConnectionName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkGatewayConnectionName = ' + virtualNetworkGatewayConnectionName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.deleteMethod(resourceGroupName, virtualNetworkGatewayConnectionName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworkGatewayConnections Get
  --resource-group-name
  --virtual-network-gateway-connection-name
*/
  var virtualNetworkGatewayConnectionsGet = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsGet.command('get [resource-group-name] [virtual-network-gateway-connection-name]')
  .description($('Commands to manage your virtual network gateway connections by the get method.'))
  .usage('[options] <resource-group-name> <virtual-network-gateway-connection-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-gateway-connection-name <virtual-network-gateway-connection-name>', $('virtual-network-gateway-connection-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkGatewayConnectionName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkGatewayConnectionName = ' + virtualNetworkGatewayConnectionName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.get(resourceGroupName, virtualNetworkGatewayConnectionName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworkGatewayConnections GetSharedKey
  --resource-group-name
  --connection-shared-key-name
*/
  var virtualNetworkGatewayConnectionsGetSharedKey = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsGetSharedKey.command('get-shared-key [resource-group-name] [connection-shared-key-name]')
  .description($('Commands to manage your virtual network gateway connections by the get-shared-key method.'))
  .usage('[options] <resource-group-name> <connection-shared-key-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--connection-shared-key-name <connection-shared-key-name>', $('connection-shared-key-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, connectionSharedKeyName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('connectionSharedKeyName = ' + connectionSharedKeyName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.getSharedKey(resourceGroupName, connectionSharedKeyName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworkGatewayConnections List
  --resource-group-name
*/
  var virtualNetworkGatewayConnectionsList = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsList.command('list [resource-group-name]')
  .description($('Commands to manage your virtual network gateway connections by the list method.'))
  .usage('[options] <resource-group-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.list(resourceGroupName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworkGatewayConnections ListNext
  --next-page-link
*/
  var virtualNetworkGatewayConnectionsListNext = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsListNext.command('list-next [next-page-link]')
  .description($('Commands to manage your virtual network gateway connections by the list-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.listNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualNetworkGatewayConnections ResetSharedKey
  --resource-group-name
  --virtual-network-gateway-connection-name
  --parameters
=============================================
{
  "keyLength":null
}
*/
  var virtualNetworkGatewayConnectionsResetSharedKey = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsResetSharedKey.command('reset-shared-key [resource-group-name] [virtual-network-gateway-connection-name] [parameters]')
  .description($('Commands to manage your virtual network gateway connections by the reset-shared-key method.'))
  .usage('[options] <resource-group-name> <virtual-network-gateway-connection-name> <parameters>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-gateway-connection-name <virtual-network-gateway-connection-name>', $('virtual-network-gateway-connection-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkGatewayConnectionName = ' + virtualNetworkGatewayConnectionName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.resetSharedKey(resourceGroupName, virtualNetworkGatewayConnectionName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualNetworkGatewayConnectionsResetSharedKeyresetSharedKeyParameters2 = virtualNetworkGatewayConnectionsResetSharedKey.category('reset-shared-key-parameters')
  .description($('Commands to generate parameter input file for your virtual network gateway connections.'));
  virtualNetworkGatewayConnectionsResetSharedKeyresetSharedKeyParameters2.command('generate')
  .description($('Generate virtualNetworkGatewayConnectionsResetSharedKey parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"keyLength\":null}', _);
    var filePath = 'virtualNetworkGatewayConnectionsResetSharedKey_resetSharedKey.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"keyLength\":null\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualNetworkGatewayConnectionsResetSharedKeyresetSharedKeyParameters2.command('patch')
  .description($('Command to patch virtualNetworkGatewayConnectionsResetSharedKey parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //reset-shared-key-parameters set connection-reset-shared-key
  var catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0 = cli.category('virtual-network-gateway-connections');
  var parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0 = catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0.category('reset-shared-key-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var setparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0 = parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0.category('connection-reset-shared-key')
  .description($('Commands to set/remove/add connection-reset-shared-key of virtual-network-gateway-connections in reset-shared-key-parameters file.'));
  setparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey0.command('set')
  .description($('Set connection-reset-shared-key in reset-shared-key-parameters string or files, e.g. \r\n{\r\n  "keyLength":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-length <keyLength>', $('Set the key-length value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'keyLength';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyLength) {
      if (options.parse && options.keyLength) {
        options.keyLength = JSON.parse(options.keyLength);
      }
        options.keyLength = JSON.parse(options.keyLength);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyLength}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //reset-shared-key-parameters remove connection-reset-shared-key
  var catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1 = cli.category('virtual-network-gateway-connections');
  var parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1 = catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1.category('reset-shared-key-parameters')
  .description($('Commands to manage parameter for your virtual-network-gateway-connections.'));
  var removeparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1 = parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1.category('connection-reset-shared-key')
  .description($('Commands to set/remove/add connection-reset-shared-key of virtual-network-gateway-connections in reset-shared-key-parameters file.'));
  removeparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey1.command('remove')
  .description($('Remove connection-reset-shared-key in reset-shared-key-parameters string or files, e.g. \r\n{\r\n  "keyLength":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key-length', $('Remove the key-length value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.keyLength;
    if (anySubItem) {
      var subItemPath = null;
      if (options.keyLength) {
        subItemPath = options.path + '/keyLength';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //reset-shared-key-parameters add connection-reset-shared-key
  var catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2 = cli.category('virtual-network-gateway-connections');
  var parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2 = catparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2.category('reset-shared-key-parameters')
  .description($('Commands to manage the parameter input file for your virtual-network-gateway-connections.'));
  var addparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2 = parametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2.category('connection-reset-shared-key')
  .description($('Commands to set/remove/add connection-reset-shared-key of virtual-network-gateway-connections in reset-shared-key-parameters file.'));
  addparametersResetSharedKeyVirtualNetworkGatewayConnectionsConnectionResetSharedKey2.command('add')
  .description($('Add connection-reset-shared-key in reset-shared-key-parameters string or files, e.g. \r\n{\r\n  "keyLength":null\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--key-length <keyLength>', $('Add the key-length value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'keyLength';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.keyLength) {
      if (options.parse && options.keyLength) {
        options.keyLength = JSON.parse(options.keyLength);
      }
        options.keyLength = JSON.parse(options.keyLength);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyLength}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualNetworkGatewayConnections SetSharedKey
  --resource-group-name
  --virtual-network-gateway-connection-name
  --parameters
=============================================
{
  "value":""
}
*/
  var virtualNetworkGatewayConnectionsSetSharedKey = cli.category('virtual-network-gateway-connections')
  .description($('Commands to manage your virtual network gateway connections.  '));
  virtualNetworkGatewayConnectionsSetSharedKey.command('set-shared-key [resource-group-name] [virtual-network-gateway-connection-name] [value]')
  .description($('Commands to manage your virtual network gateway connections by the set-shared-key method.'))
  .usage('[options] <resource-group-name> <virtual-network-gateway-connection-name> <value>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-gateway-connection-name <virtual-network-gateway-connection-name>', $('virtual-network-gateway-connection-name'))
  .option('--value <value>', $('value'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkGatewayConnectionName, value, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkGatewayConnectionName = ' + virtualNetworkGatewayConnectionName);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var parametersFileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(parametersFileContent);
    }
    else {
      parametersObj = {};
      cli.output.verbose('value = ' + value);
      parametersObj.value = value;
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworkGatewayConnections.setSharedKey(resourceGroupName, virtualNetworkGatewayConnectionName, parametersObj, _);
    cli.output.json(result);
  });
/*
  VirtualNetworks CreateOrUpdate
  --resource-group-name
  --virtual-network-name
  --parameters
=============================================
{
  "etag":"",
  "addressSpace":{
    "addressPrefixes":[
      ""
    ]
  },
  "dhcpOptions":{
    "dnsServers":[
      ""
    ]
  },
  "subnets":[
    {
      "name":"",
      "etag":"",
      "addressPrefix":"",
      "networkSecurityGroup":{
        "etag":"",
        "securityRules":[
          {
            "name":"",
            "etag":"",
            "description":"",
            "protocol":"",
            "sourcePortRange":"",
            "destinationPortRange":"",
            "sourceAddressPrefix":"",
            "destinationAddressPrefix":"",
            "access":"",
            "priority":null,
            "direction":"",
            "provisioningState":"",
            "id":""
          }
        ],
        "defaultSecurityRules":[
null
        ],
        "networkInterfaces":[
          {
            "etag":"",
            "virtualMachine":{
              "id":""
            },
            "networkSecurityGroup":null,
            "ipConfigurations":[
              {
                "name":"",
                "etag":"",
                "loadBalancerBackendAddressPools":[
                  {
                    "name":"",
                    "etag":"",
                    "backendIPConfigurations":[
null
                    ],
                    "loadBalancingRules":[
null
                    ],
                    "outboundNatRule":null,
                    "provisioningState":"",
                    "id":""
                  }
                ],
                "loadBalancerInboundNatRules":[
                  {
                    "name":"",
                    "etag":"",
                    "frontendIPConfiguration":null,
                    "backendIPConfiguration":null,
                    "protocol":"",
                    "frontendPort":null,
                    "backendPort":null,
                    "idleTimeoutInMinutes":null,
                    "enableFloatingIP":null,
                    "provisioningState":"",
                    "id":""
                  }
                ],
                "privateIPAddress":"",
                "privateIPAllocationMethod":"",
                "subnet":null,
                "publicIPAddress":{
                  "etag":"",
                  "publicIPAllocationMethod":"",
                  "ipConfiguration":{
                    "name":"",
                    "etag":"",
                    "privateIPAddress":"",
                    "privateIPAllocationMethod":"",
                    "subnet":null,
                    "publicIPAddress":null,
                    "provisioningState":"",
                    "id":""
                  },
                  "dnsSettings":{
                    "domainNameLabel":"",
                    "fqdn":"",
                    "reverseFqdn":""
                  },
                  "ipAddress":"",
                  "idleTimeoutInMinutes":null,
                  "resourceGuid":"",
                  "provisioningState":"",
                  "id":"",
                  "name":null,
                  "type":null,
                  "location":"",
                  "tags":{
                  }
                },
                "provisioningState":"",
                "id":""
              }
            ],
            "dnsSettings":{
              "dnsServers":[
                ""
              ],
              "appliedDnsServers":[
                ""
              ],
              "internalDnsNameLabel":"",
              "internalFqdn":""
            },
            "macAddress":"",
            "primary":null,
            "enableIPForwarding":null,
            "resourceGuid":"",
            "provisioningState":"",
            "id":"",
            "name":null,
            "type":null,
            "location":"",
            "tags":{
            }
          }
        ],
        "subnets":[
null
        ],
        "resourceGuid":"",
        "provisioningState":"",
        "id":"",
        "name":null,
        "type":null,
        "location":"",
        "tags":{
        }
      },
      "routeTable":{
        "etag":"",
        "routes":[
          {
            "name":"",
            "etag":"",
            "addressPrefix":"",
            "nextHopType":"",
            "nextHopIpAddress":"",
            "provisioningState":"",
            "id":""
          }
        ],
        "subnets":[
null
        ],
        "provisioningState":"",
        "id":"",
        "name":null,
        "type":null,
        "location":"",
        "tags":{
        }
      },
      "ipConfigurations":[
null
      ],
      "provisioningState":"",
      "id":""
    }
  ],
  "resourceGuid":"",
  "provisioningState":"",
  "id":"",
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var virtualNetworksCreateOrUpdate = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksCreateOrUpdate.command('create-or-update [resource-group-name] [virtual-network-name] [parameters]')
  .description($('Commands to manage your virtual networks by the create-or-update method.'))
  .usage('[options] <resource-group-name> <virtual-network-name> <parameters>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-name <virtual-network-name>', $('virtual-network-name'))
  .option('-p, --parameters <parameters>', $('parameters'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkName, parameters, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkName = ' + virtualNetworkName);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.createOrUpdate(resourceGroupName, virtualNetworkName, parametersObj, _);
    cli.output.json(result);
  });
  var virtualNetworksCreateOrUpdatecreateOrUpdateParameters2 = virtualNetworksCreateOrUpdate.category('create-or-update-parameters')
  .description($('Commands to generate parameter input file for your virtual networks.'));
  virtualNetworksCreateOrUpdatecreateOrUpdateParameters2.command('generate')
  .description($('Generate virtualNetworksCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"etag\":\"\",\"addressSpace\":{\"addressPrefixes\":[\"\"]},\"dhcpOptions\":{\"dnsServers\":[\"\"]},\"subnets\":[{\"name\":\"\",\"etag\":\"\",\"addressPrefix\":\"\",\"networkSecurityGroup\":{\"etag\":\"\",\"securityRules\":[{\"name\":\"\",\"etag\":\"\",\"description\":\"\",\"protocol\":\"\",\"sourcePortRange\":\"\",\"destinationPortRange\":\"\",\"sourceAddressPrefix\":\"\",\"destinationAddressPrefix\":\"\",\"access\":\"\",\"priority\":null,\"direction\":\"\",\"provisioningState\":\"\",\"id\":\"\"}],\"defaultSecurityRules\":[null],\"networkInterfaces\":[{\"etag\":\"\",\"virtualMachine\":{\"id\":\"\"},\"networkSecurityGroup\":null,\"ipConfigurations\":[{\"name\":\"\",\"etag\":\"\",\"loadBalancerBackendAddressPools\":[{\"name\":\"\",\"etag\":\"\",\"backendIPConfigurations\":[null],\"loadBalancingRules\":[null],\"outboundNatRule\":null,\"provisioningState\":\"\",\"id\":\"\"}],\"loadBalancerInboundNatRules\":[{\"name\":\"\",\"etag\":\"\",\"frontendIPConfiguration\":null,\"backendIPConfiguration\":null,\"protocol\":\"\",\"frontendPort\":null,\"backendPort\":null,\"idleTimeoutInMinutes\":null,\"enableFloatingIP\":null,\"provisioningState\":\"\",\"id\":\"\"}],\"privateIPAddress\":\"\",\"privateIPAllocationMethod\":\"\",\"subnet\":null,\"publicIPAddress\":{\"etag\":\"\",\"publicIPAllocationMethod\":\"\",\"ipConfiguration\":{\"name\":\"\",\"etag\":\"\",\"privateIPAddress\":\"\",\"privateIPAllocationMethod\":\"\",\"subnet\":null,\"publicIPAddress\":null,\"provisioningState\":\"\",\"id\":\"\"},\"dnsSettings\":{\"domainNameLabel\":\"\",\"fqdn\":\"\",\"reverseFqdn\":\"\"},\"ipAddress\":\"\",\"idleTimeoutInMinutes\":null,\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}},\"provisioningState\":\"\",\"id\":\"\"}],\"dnsSettings\":{\"dnsServers\":[\"\"],\"appliedDnsServers\":[\"\"],\"internalDnsNameLabel\":\"\",\"internalFqdn\":\"\"},\"macAddress\":\"\",\"primary\":null,\"enableIPForwarding\":null,\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}],\"subnets\":[null],\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}},\"routeTable\":{\"etag\":\"\",\"routes\":[{\"name\":\"\",\"etag\":\"\",\"addressPrefix\":\"\",\"nextHopType\":\"\",\"nextHopIpAddress\":\"\",\"provisioningState\":\"\",\"id\":\"\"}],\"subnets\":[null],\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}},\"ipConfigurations\":[null],\"provisioningState\":\"\",\"id\":\"\"}],\"resourceGuid\":\"\",\"provisioningState\":\"\",\"id\":\"\",\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualNetworksCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"etag\":\"\",\r\n\"addressSpace\":{\r\n\"addressPrefixes\":[\r\n\"\"\r\n]\r\n},\r\n\"dhcpOptions\":{\r\n\"dnsServers\":[\r\n\"\"\r\n]\r\n},\r\n\"subnets\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"addressPrefix\":\"\",\r\n\"networkSecurityGroup\":{\r\n\"etag\":\"\",\r\n\"securityRules\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"description\":\"\",\r\n\"protocol\":\"\",\r\n\"sourcePortRange\":\"\",\r\n\"destinationPortRange\":\"\",\r\n\"sourceAddressPrefix\":\"\",\r\n\"destinationAddressPrefix\":\"\",\r\n\"access\":\"\",\r\n\"priority\":null,\r\n\"direction\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"defaultSecurityRules\":[\r\nnull\r\n],\r\n\"networkInterfaces\":[\r\n{\r\n\"etag\":\"\",\r\n\"virtualMachine\":{\r\n\"id\":\"\"\r\n},\r\n\"networkSecurityGroup\":null,\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"backendIPConfigurations\":[\r\nnull\r\n],\r\n\"loadBalancingRules\":[\r\nnull\r\n],\r\n\"outboundNatRule\":null,\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerInboundNatRules\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"frontendIPConfiguration\":null,\r\n\"backendIPConfiguration\":null,\r\n\"protocol\":\"\",\r\n\"frontendPort\":null,\r\n\"backendPort\":null,\r\n\"idleTimeoutInMinutes\":null,\r\n\"enableFloatingIP\":null,\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"privateIPAddress\":\"\",\r\n\"privateIPAllocationMethod\":\"\",\r\n\"subnet\":null,\r\n\"publicIPAddress\":{\r\n\"etag\":\"\",\r\n\"publicIPAllocationMethod\":\"\",\r\n\"ipConfiguration\":{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"privateIPAddress\":\"\",\r\n\"privateIPAllocationMethod\":\"\",\r\n\"subnet\":null,\r\n\"publicIPAddress\":null,\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"dnsSettings\":{\r\n\"domainNameLabel\":\"\",\r\n\"fqdn\":\"\",\r\n\"reverseFqdn\":\"\"\r\n},\r\n\"ipAddress\":\"\",\r\n\"idleTimeoutInMinutes\":null,\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"dnsSettings\":{\r\n\"dnsServers\":[\r\n\"\"\r\n],\r\n\"appliedDnsServers\":[\r\n\"\"\r\n],\r\n\"internalDnsNameLabel\":\"\",\r\n\"internalFqdn\":\"\"\r\n},\r\n\"macAddress\":\"\",\r\n\"primary\":null,\r\n\"enableIPForwarding\":null,\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}\r\n],\r\n\"subnets\":[\r\nnull\r\n],\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n},\r\n\"routeTable\":{\r\n\"etag\":\"\",\r\n\"routes\":[\r\n{\r\n\"name\":\"\",\r\n\"etag\":\"\",\r\n\"addressPrefix\":\"\",\r\n\"nextHopType\":\"\",\r\n\"nextHopIpAddress\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"subnets\":[\r\nnull\r\n],\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n},\r\n\"ipConfigurations\":[\r\nnull\r\n],\r\n\"provisioningState\":\"\",\r\n\"id\":\"\"\r\n}\r\n],\r\n\"resourceGuid\":\"\",\r\n\"provisioningState\":\"\",\r\n\"id\":\"\",\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualNetworksCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch virtualNetworksCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-network
  var catparametersCreateOrUpdateVirtualNetworksVirtualNetwork0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualNetwork0 = catparametersCreateOrUpdateVirtualNetworksVirtualNetwork0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksVirtualNetwork0 = parametersCreateOrUpdateVirtualNetworksVirtualNetwork0.category('virtual-network')
  .description($('Commands to set/remove/add virtual-network of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksVirtualNetwork0.command('set')
  .description($('Set virtual-network in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "addressSpace":{\r\n    "addressPrefixes":[\r\n      ""\r\n    ]\r\n  },\r\n  "dhcpOptions":{\r\n    "dnsServers":[\r\n      ""\r\n    ]\r\n  },\r\n  "subnets":[\r\n    {\r\n      "name":"",\r\n      "etag":"",\r\n      "addressPrefix":"",\r\n      "networkSecurityGroup":{\r\n        "etag":"",\r\n        "securityRules":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "description":"",\r\n            "protocol":"",\r\n            "sourcePortRange":"",\r\n            "destinationPortRange":"",\r\n            "sourceAddressPrefix":"",\r\n            "destinationAddressPrefix":"",\r\n            "access":"",\r\n            "priority":null,\r\n            "direction":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "defaultSecurityRules":[\r\nnull\r\n        ],\r\n        "networkInterfaces":[\r\n          {\r\n            "etag":"",\r\n            "virtualMachine":{\r\n              "id":""\r\n            },\r\n            "networkSecurityGroup":null,\r\n            "ipConfigurations":[\r\n              {\r\n                "name":"",\r\n                "etag":"",\r\n                "loadBalancerBackendAddressPools":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "backendIPConfigurations":[\r\nnull\r\n                    ],\r\n                    "loadBalancingRules":[\r\nnull\r\n                    ],\r\n                    "outboundNatRule":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "loadBalancerInboundNatRules":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "frontendIPConfiguration":null,\r\n                    "backendIPConfiguration":null,\r\n                    "protocol":"",\r\n                    "frontendPort":null,\r\n                    "backendPort":null,\r\n                    "idleTimeoutInMinutes":null,\r\n                    "enableFloatingIP":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "privateIPAddress":"",\r\n                "privateIPAllocationMethod":"",\r\n                "subnet":null,\r\n                "publicIPAddress":{\r\n                  "etag":"",\r\n                  "publicIPAllocationMethod":"",\r\n                  "ipConfiguration":{\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "privateIPAddress":"",\r\n                    "privateIPAllocationMethod":"",\r\n                    "subnet":null,\r\n                    "publicIPAddress":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  },\r\n                  "dnsSettings":{\r\n                    "domainNameLabel":"",\r\n                    "fqdn":"",\r\n                    "reverseFqdn":""\r\n                  },\r\n                  "ipAddress":"",\r\n                  "idleTimeoutInMinutes":null,\r\n                  "resourceGuid":"",\r\n                  "provisioningState":"",\r\n                  "id":"",\r\n                  "name":null,\r\n                  "type":null,\r\n                  "location":"",\r\n                  "tags":{\r\n                  }\r\n                },\r\n                "provisioningState":"",\r\n                "id":""\r\n              }\r\n            ],\r\n            "dnsSettings":{\r\n              "dnsServers":[\r\n                ""\r\n              ],\r\n              "appliedDnsServers":[\r\n                ""\r\n              ],\r\n              "internalDnsNameLabel":"",\r\n              "internalFqdn":""\r\n            },\r\n            "macAddress":"",\r\n            "primary":null,\r\n            "enableIPForwarding":null,\r\n            "resourceGuid":"",\r\n            "provisioningState":"",\r\n            "id":"",\r\n            "name":null,\r\n            "type":null,\r\n            "location":"",\r\n            "tags":{\r\n            }\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "resourceGuid":"",\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "routeTable":{\r\n        "etag":"",\r\n        "routes":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "addressPrefix":"",\r\n            "nextHopType":"",\r\n            "nextHopIpAddress":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "ipConfigurations":[\r\nnull\r\n      ],\r\n      "provisioningState":"",\r\n      "id":""\r\n    }\r\n  ],\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--address-space <addressSpace>', $('Set the address-space value.'))
  .option('--dhcp-options <dhcpOptions>', $('Set the dhcp-options value.'))
  .option('--subnets <subnets>', $('Set the subnets value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'addressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressSpace) {
      if (options.parse && options.addressSpace) {
        options.addressSpace = JSON.parse(options.addressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressSpace}]);
    }
    paramPath = options.path + '/' + 'dhcpOptions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dhcpOptions) {
      if (options.parse && options.dhcpOptions) {
        options.dhcpOptions = JSON.parse(options.dhcpOptions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dhcpOptions}]);
    }
    paramPath = options.path + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-network
  var catparametersCreateOrUpdateVirtualNetworksVirtualNetwork1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualNetwork1 = catparametersCreateOrUpdateVirtualNetworksVirtualNetwork1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksVirtualNetwork1 = parametersCreateOrUpdateVirtualNetworksVirtualNetwork1.category('virtual-network')
  .description($('Commands to set/remove/add virtual-network of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksVirtualNetwork1.command('remove')
  .description($('Remove virtual-network in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "addressSpace":{\r\n    "addressPrefixes":[\r\n      ""\r\n    ]\r\n  },\r\n  "dhcpOptions":{\r\n    "dnsServers":[\r\n      ""\r\n    ]\r\n  },\r\n  "subnets":[\r\n    {\r\n      "name":"",\r\n      "etag":"",\r\n      "addressPrefix":"",\r\n      "networkSecurityGroup":{\r\n        "etag":"",\r\n        "securityRules":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "description":"",\r\n            "protocol":"",\r\n            "sourcePortRange":"",\r\n            "destinationPortRange":"",\r\n            "sourceAddressPrefix":"",\r\n            "destinationAddressPrefix":"",\r\n            "access":"",\r\n            "priority":null,\r\n            "direction":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "defaultSecurityRules":[\r\nnull\r\n        ],\r\n        "networkInterfaces":[\r\n          {\r\n            "etag":"",\r\n            "virtualMachine":{\r\n              "id":""\r\n            },\r\n            "networkSecurityGroup":null,\r\n            "ipConfigurations":[\r\n              {\r\n                "name":"",\r\n                "etag":"",\r\n                "loadBalancerBackendAddressPools":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "backendIPConfigurations":[\r\nnull\r\n                    ],\r\n                    "loadBalancingRules":[\r\nnull\r\n                    ],\r\n                    "outboundNatRule":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "loadBalancerInboundNatRules":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "frontendIPConfiguration":null,\r\n                    "backendIPConfiguration":null,\r\n                    "protocol":"",\r\n                    "frontendPort":null,\r\n                    "backendPort":null,\r\n                    "idleTimeoutInMinutes":null,\r\n                    "enableFloatingIP":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "privateIPAddress":"",\r\n                "privateIPAllocationMethod":"",\r\n                "subnet":null,\r\n                "publicIPAddress":{\r\n                  "etag":"",\r\n                  "publicIPAllocationMethod":"",\r\n                  "ipConfiguration":{\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "privateIPAddress":"",\r\n                    "privateIPAllocationMethod":"",\r\n                    "subnet":null,\r\n                    "publicIPAddress":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  },\r\n                  "dnsSettings":{\r\n                    "domainNameLabel":"",\r\n                    "fqdn":"",\r\n                    "reverseFqdn":""\r\n                  },\r\n                  "ipAddress":"",\r\n                  "idleTimeoutInMinutes":null,\r\n                  "resourceGuid":"",\r\n                  "provisioningState":"",\r\n                  "id":"",\r\n                  "name":null,\r\n                  "type":null,\r\n                  "location":"",\r\n                  "tags":{\r\n                  }\r\n                },\r\n                "provisioningState":"",\r\n                "id":""\r\n              }\r\n            ],\r\n            "dnsSettings":{\r\n              "dnsServers":[\r\n                ""\r\n              ],\r\n              "appliedDnsServers":[\r\n                ""\r\n              ],\r\n              "internalDnsNameLabel":"",\r\n              "internalFqdn":""\r\n            },\r\n            "macAddress":"",\r\n            "primary":null,\r\n            "enableIPForwarding":null,\r\n            "resourceGuid":"",\r\n            "provisioningState":"",\r\n            "id":"",\r\n            "name":null,\r\n            "type":null,\r\n            "location":"",\r\n            "tags":{\r\n            }\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "resourceGuid":"",\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "routeTable":{\r\n        "etag":"",\r\n        "routes":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "addressPrefix":"",\r\n            "nextHopType":"",\r\n            "nextHopIpAddress":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "ipConfigurations":[\r\nnull\r\n      ],\r\n      "provisioningState":"",\r\n      "id":""\r\n    }\r\n  ],\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--address-space', $('Remove the address-space value.'))
  .option('--dhcp-options', $('Remove the dhcp-options value.'))
  .option('--subnets', $('Remove the subnets value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.etag || options.addressSpace || options.dhcpOptions || options.subnets || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.addressSpace) {
        subItemPath = options.path + '/addressSpace';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dhcpOptions) {
        subItemPath = options.path + '/dhcpOptions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnets) {
        subItemPath = options.path + '/subnets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-network
  var catparametersCreateOrUpdateVirtualNetworksVirtualNetwork2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualNetwork2 = catparametersCreateOrUpdateVirtualNetworksVirtualNetwork2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksVirtualNetwork2 = parametersCreateOrUpdateVirtualNetworksVirtualNetwork2.category('virtual-network')
  .description($('Commands to set/remove/add virtual-network of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksVirtualNetwork2.command('add')
  .description($('Add virtual-network in create-or-update-parameters string or files, e.g. \r\n{\r\n  "etag":"",\r\n  "addressSpace":{\r\n    "addressPrefixes":[\r\n      ""\r\n    ]\r\n  },\r\n  "dhcpOptions":{\r\n    "dnsServers":[\r\n      ""\r\n    ]\r\n  },\r\n  "subnets":[\r\n    {\r\n      "name":"",\r\n      "etag":"",\r\n      "addressPrefix":"",\r\n      "networkSecurityGroup":{\r\n        "etag":"",\r\n        "securityRules":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "description":"",\r\n            "protocol":"",\r\n            "sourcePortRange":"",\r\n            "destinationPortRange":"",\r\n            "sourceAddressPrefix":"",\r\n            "destinationAddressPrefix":"",\r\n            "access":"",\r\n            "priority":null,\r\n            "direction":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "defaultSecurityRules":[\r\nnull\r\n        ],\r\n        "networkInterfaces":[\r\n          {\r\n            "etag":"",\r\n            "virtualMachine":{\r\n              "id":""\r\n            },\r\n            "networkSecurityGroup":null,\r\n            "ipConfigurations":[\r\n              {\r\n                "name":"",\r\n                "etag":"",\r\n                "loadBalancerBackendAddressPools":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "backendIPConfigurations":[\r\nnull\r\n                    ],\r\n                    "loadBalancingRules":[\r\nnull\r\n                    ],\r\n                    "outboundNatRule":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "loadBalancerInboundNatRules":[\r\n                  {\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "frontendIPConfiguration":null,\r\n                    "backendIPConfiguration":null,\r\n                    "protocol":"",\r\n                    "frontendPort":null,\r\n                    "backendPort":null,\r\n                    "idleTimeoutInMinutes":null,\r\n                    "enableFloatingIP":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  }\r\n                ],\r\n                "privateIPAddress":"",\r\n                "privateIPAllocationMethod":"",\r\n                "subnet":null,\r\n                "publicIPAddress":{\r\n                  "etag":"",\r\n                  "publicIPAllocationMethod":"",\r\n                  "ipConfiguration":{\r\n                    "name":"",\r\n                    "etag":"",\r\n                    "privateIPAddress":"",\r\n                    "privateIPAllocationMethod":"",\r\n                    "subnet":null,\r\n                    "publicIPAddress":null,\r\n                    "provisioningState":"",\r\n                    "id":""\r\n                  },\r\n                  "dnsSettings":{\r\n                    "domainNameLabel":"",\r\n                    "fqdn":"",\r\n                    "reverseFqdn":""\r\n                  },\r\n                  "ipAddress":"",\r\n                  "idleTimeoutInMinutes":null,\r\n                  "resourceGuid":"",\r\n                  "provisioningState":"",\r\n                  "id":"",\r\n                  "name":null,\r\n                  "type":null,\r\n                  "location":"",\r\n                  "tags":{\r\n                  }\r\n                },\r\n                "provisioningState":"",\r\n                "id":""\r\n              }\r\n            ],\r\n            "dnsSettings":{\r\n              "dnsServers":[\r\n                ""\r\n              ],\r\n              "appliedDnsServers":[\r\n                ""\r\n              ],\r\n              "internalDnsNameLabel":"",\r\n              "internalFqdn":""\r\n            },\r\n            "macAddress":"",\r\n            "primary":null,\r\n            "enableIPForwarding":null,\r\n            "resourceGuid":"",\r\n            "provisioningState":"",\r\n            "id":"",\r\n            "name":null,\r\n            "type":null,\r\n            "location":"",\r\n            "tags":{\r\n            }\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "resourceGuid":"",\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "routeTable":{\r\n        "etag":"",\r\n        "routes":[\r\n          {\r\n            "name":"",\r\n            "etag":"",\r\n            "addressPrefix":"",\r\n            "nextHopType":"",\r\n            "nextHopIpAddress":"",\r\n            "provisioningState":"",\r\n            "id":""\r\n          }\r\n        ],\r\n        "subnets":[\r\nnull\r\n        ],\r\n        "provisioningState":"",\r\n        "id":"",\r\n        "name":null,\r\n        "type":null,\r\n        "location":"",\r\n        "tags":{\r\n        }\r\n      },\r\n      "ipConfigurations":[\r\nnull\r\n      ],\r\n      "provisioningState":"",\r\n      "id":""\r\n    }\r\n  ],\r\n  "resourceGuid":"",\r\n  "provisioningState":"",\r\n  "id":"",\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--address-space <addressSpace>', $('Add the address-space value.'))
  .option('--dhcp-options <dhcpOptions>', $('Add the dhcp-options value.'))
  .option('--subnets <subnets>', $('Add the subnets value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '' + '/' + 'addressSpace';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressSpace) {
      if (options.parse && options.addressSpace) {
        options.addressSpace = JSON.parse(options.addressSpace);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressSpace}]);
    }
    paramPath = '' + '/' + 'dhcpOptions';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dhcpOptions) {
      if (options.parse && options.dhcpOptions) {
        options.dhcpOptions = JSON.parse(options.dhcpOptions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dhcpOptions}]);
    }
    paramPath = '' + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = '' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-space
  var catparametersCreateOrUpdateVirtualNetworksAddressSpace0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressSpace0 = catparametersCreateOrUpdateVirtualNetworksAddressSpace0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksAddressSpace0 = parametersCreateOrUpdateVirtualNetworksAddressSpace0.category('address-space')
  .description($('Commands to set/remove/add address-space of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksAddressSpace0.command('set')
  .description($('Set address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Set the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/addressSpace';
    var paramPath = options.path + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-space
  var catparametersCreateOrUpdateVirtualNetworksAddressSpace1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressSpace1 = catparametersCreateOrUpdateVirtualNetworksAddressSpace1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksAddressSpace1 = parametersCreateOrUpdateVirtualNetworksAddressSpace1.category('address-space')
  .description($('Commands to set/remove/add address-space of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksAddressSpace1.command('remove')
  .description($('Remove address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--address-prefixes', $('Remove the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/addressSpace';
    var anySubItem = false || options.addressPrefixes;
    if (anySubItem) {
      var subItemPath = null;
      if (options.addressPrefixes) {
        subItemPath = options.path + '/addressPrefixes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-space
  var catparametersCreateOrUpdateVirtualNetworksAddressSpace2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressSpace2 = catparametersCreateOrUpdateVirtualNetworksAddressSpace2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksAddressSpace2 = parametersCreateOrUpdateVirtualNetworksAddressSpace2.category('address-space')
  .description($('Commands to set/remove/add address-space of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksAddressSpace2.command('add')
  .description($('Add address-space in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressSpace" : {\r\n             "addressPrefixes":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--address-prefixes <addressPrefixes>', $('Add the address-prefixes value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/addressSpace' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/addressSpace' + '/' + 'addressPrefixes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefixes) {
      if (options.parse && options.addressPrefixes) {
        options.addressPrefixes = JSON.parse(options.addressPrefixes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefixes}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set address-prefixes
  var catparametersCreateOrUpdateVirtualNetworksAddressPrefixes0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressPrefixes0 = catparametersCreateOrUpdateVirtualNetworksAddressPrefixes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksAddressPrefixes0 = parametersCreateOrUpdateVirtualNetworksAddressPrefixes0.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksAddressPrefixes0.command('set')
  .description($('Set address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/addressSpace/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove address-prefixes
  var catparametersCreateOrUpdateVirtualNetworksAddressPrefixes1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressPrefixes1 = catparametersCreateOrUpdateVirtualNetworksAddressPrefixes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksAddressPrefixes1 = parametersCreateOrUpdateVirtualNetworksAddressPrefixes1.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksAddressPrefixes1.command('remove')
  .description($('Remove address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/addressSpace/addressPrefixes' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add address-prefixes
  var catparametersCreateOrUpdateVirtualNetworksAddressPrefixes2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAddressPrefixes2 = catparametersCreateOrUpdateVirtualNetworksAddressPrefixes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksAddressPrefixes2 = parametersCreateOrUpdateVirtualNetworksAddressPrefixes2.category('address-prefixes')
  .description($('Commands to set/remove/add address-prefixes of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksAddressPrefixes2.command('add')
  .description($('Add address-prefixes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "addressPrefixes" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/addressSpace/addressPrefixes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set dhcp-options
  var catparametersCreateOrUpdateVirtualNetworksDhcpOptions0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDhcpOptions0 = catparametersCreateOrUpdateVirtualNetworksDhcpOptions0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDhcpOptions0 = parametersCreateOrUpdateVirtualNetworksDhcpOptions0.category('dhcp-options')
  .description($('Commands to set/remove/add dhcp-options of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDhcpOptions0.command('set')
  .description($('Set dhcp-options in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dhcpOptions" : {\r\n             "dnsServers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--dns-servers <dnsServers>', $('Set the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dhcpOptions';
    var paramPath = options.path + '/' + 'dnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove dhcp-options
  var catparametersCreateOrUpdateVirtualNetworksDhcpOptions1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDhcpOptions1 = catparametersCreateOrUpdateVirtualNetworksDhcpOptions1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDhcpOptions1 = parametersCreateOrUpdateVirtualNetworksDhcpOptions1.category('dhcp-options')
  .description($('Commands to set/remove/add dhcp-options of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDhcpOptions1.command('remove')
  .description($('Remove dhcp-options in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dhcpOptions" : {\r\n             "dnsServers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--dns-servers', $('Remove the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dhcpOptions';
    var anySubItem = false || options.dnsServers;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dnsServers) {
        subItemPath = options.path + '/dnsServers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add dhcp-options
  var catparametersCreateOrUpdateVirtualNetworksDhcpOptions2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDhcpOptions2 = catparametersCreateOrUpdateVirtualNetworksDhcpOptions2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDhcpOptions2 = parametersCreateOrUpdateVirtualNetworksDhcpOptions2.category('dhcp-options')
  .description($('Commands to set/remove/add dhcp-options of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDhcpOptions2.command('add')
  .description($('Add dhcp-options in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dhcpOptions" : {\r\n             "dnsServers":[\r\n               ""\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--dns-servers <dnsServers>', $('Add the dns-servers value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dhcpOptions' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/dhcpOptions' + '/' + 'dnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers0 = catparametersCreateOrUpdateVirtualNetworksDnsServers0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDnsServers0 = parametersCreateOrUpdateVirtualNetworksDnsServers0.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDnsServers0.command('set')
  .description($('Set dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/dhcpOptions/dnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers1 = catparametersCreateOrUpdateVirtualNetworksDnsServers1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDnsServers1 = parametersCreateOrUpdateVirtualNetworksDnsServers1.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDnsServers1.command('remove')
  .description($('Remove dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/dhcpOptions/dnsServers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers2 = catparametersCreateOrUpdateVirtualNetworksDnsServers2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDnsServers2 = parametersCreateOrUpdateVirtualNetworksDnsServers2.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDnsServers2.command('add')
  .description($('Add dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/dhcpOptions/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets0 = catparametersCreateOrUpdateVirtualNetworksSubnets0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksSubnets0 = parametersCreateOrUpdateVirtualNetworksSubnets0.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksSubnets0.command('set')
  .description($('Set subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--address-prefix <addressPrefix>', $('Set the address-prefix value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--route-table <routeTable>', $('Set the route-table value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'addressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefix) {
      if (options.parse && options.addressPrefix) {
        options.addressPrefix = JSON.parse(options.addressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefix}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'routeTable';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routeTable) {
      if (options.parse && options.routeTable) {
        options.routeTable = JSON.parse(options.routeTable);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routeTable}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets1 = catparametersCreateOrUpdateVirtualNetworksSubnets1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnets1 = parametersCreateOrUpdateVirtualNetworksSubnets1.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnets1.command('remove')
  .description($('Remove subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--address-prefix', $('Remove the address-prefix value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--route-table', $('Remove the route-table value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.addressPrefix || options.networkSecurityGroup || options.routeTable || options.ipConfigurations || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.addressPrefix) {
        subItemPath = options.path + '/addressPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routeTable) {
        subItemPath = options.path + '/routeTable';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets2 = catparametersCreateOrUpdateVirtualNetworksSubnets2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnets2 = parametersCreateOrUpdateVirtualNetworksSubnets2.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnets2.command('add')
  .description($('Add subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--address-prefix <addressPrefix>', $('Add the address-prefix value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--route-table <routeTable>', $('Add the route-table value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'addressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefix) {
      if (options.parse && options.addressPrefix) {
        options.addressPrefix = JSON.parse(options.addressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefix}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'routeTable';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routeTable) {
      if (options.parse && options.routeTable) {
        options.routeTable = JSON.parse(options.routeTable);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routeTable}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set network-security-group
  var catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0 = catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0 = parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0.category('network-security-group')
  .description($('Commands to set/remove/add network-security-group of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup0.command('set')
  .description($('Set network-security-group in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkSecurityGroup" : {\r\n             "etag":"",\r\n             "securityRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "description":"",\r\n                 "protocol":"",\r\n                 "sourcePortRange":"",\r\n                 "destinationPortRange":"",\r\n                 "sourceAddressPrefix":"",\r\n                 "destinationAddressPrefix":"",\r\n                 "access":"",\r\n                 "priority":null,\r\n                 "direction":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "defaultSecurityRules":[\r\n           null\r\n             ],\r\n             "networkInterfaces":[\r\n               {\r\n                 "etag":"",\r\n                 "virtualMachine":{\r\n                   "id":""\r\n                 },\r\n                 "networkSecurityGroup":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "backendIPConfigurations":[\r\n           null\r\n                         ],\r\n                         "loadBalancingRules":[\r\n           null\r\n                         ],\r\n                         "outboundNatRule":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "frontendIPConfiguration":null,\r\n                         "backendIPConfiguration":null,\r\n                         "protocol":"",\r\n                         "frontendPort":null,\r\n                         "backendPort":null,\r\n                         "idleTimeoutInMinutes":null,\r\n                         "enableFloatingIP":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":{\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "networkSecurityGroup":null,\r\n                       "routeTable":{\r\n                         "etag":"",\r\n                         "routes":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "addressPrefix":"",\r\n                             "nextHopType":"",\r\n                             "nextHopIpAddress":"",\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "subnets":[\r\n           null\r\n                         ],\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":null,\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     },\r\n                     "publicIPAddress":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "dnsSettings":{\r\n                   "dnsServers":[\r\n                     ""\r\n                   ],\r\n                   "appliedDnsServers":[\r\n                     ""\r\n                   ],\r\n                   "internalDnsNameLabel":"",\r\n                   "internalFqdn":""\r\n                 },\r\n                 "macAddress":"",\r\n                 "primary":null,\r\n                 "enableIPForwarding":null,\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               }\r\n             ],\r\n             "subnets":[\r\n           null\r\n             ],\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--security-rules <securityRules>', $('Set the security-rules value.'))
  .option('--default-security-rules <defaultSecurityRules>', $('Set the default-security-rules value.'))
  .option('--network-interfaces <networkInterfaces>', $('Set the network-interfaces value.'))
  .option('--subnets <subnets>', $('Set the subnets value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'securityRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.securityRules) {
      if (options.parse && options.securityRules) {
        options.securityRules = JSON.parse(options.securityRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.securityRules}]);
    }
    paramPath = options.path + '/' + 'defaultSecurityRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.defaultSecurityRules) {
      if (options.parse && options.defaultSecurityRules) {
        options.defaultSecurityRules = JSON.parse(options.defaultSecurityRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultSecurityRules}]);
    }
    paramPath = options.path + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = options.path + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-security-group
  var catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.category('network-security-group')
  .description($('Commands to set/remove/add network-security-group of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.command('remove')
  .description($('Remove network-security-group in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkSecurityGroup" : {\r\n             "etag":"",\r\n             "securityRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "description":"",\r\n                 "protocol":"",\r\n                 "sourcePortRange":"",\r\n                 "destinationPortRange":"",\r\n                 "sourceAddressPrefix":"",\r\n                 "destinationAddressPrefix":"",\r\n                 "access":"",\r\n                 "priority":null,\r\n                 "direction":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "defaultSecurityRules":[\r\n           null\r\n             ],\r\n             "networkInterfaces":[\r\n               {\r\n                 "etag":"",\r\n                 "virtualMachine":{\r\n                   "id":""\r\n                 },\r\n                 "networkSecurityGroup":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "backendIPConfigurations":[\r\n           null\r\n                         ],\r\n                         "loadBalancingRules":[\r\n           null\r\n                         ],\r\n                         "outboundNatRule":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "frontendIPConfiguration":null,\r\n                         "backendIPConfiguration":null,\r\n                         "protocol":"",\r\n                         "frontendPort":null,\r\n                         "backendPort":null,\r\n                         "idleTimeoutInMinutes":null,\r\n                         "enableFloatingIP":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":{\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "networkSecurityGroup":null,\r\n                       "routeTable":{\r\n                         "etag":"",\r\n                         "routes":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "addressPrefix":"",\r\n                             "nextHopType":"",\r\n                             "nextHopIpAddress":"",\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "subnets":[\r\n           null\r\n                         ],\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":null,\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     },\r\n                     "publicIPAddress":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "dnsSettings":{\r\n                   "dnsServers":[\r\n                     ""\r\n                   ],\r\n                   "appliedDnsServers":[\r\n                     ""\r\n                   ],\r\n                   "internalDnsNameLabel":"",\r\n                   "internalFqdn":""\r\n                 },\r\n                 "macAddress":"",\r\n                 "primary":null,\r\n                 "enableIPForwarding":null,\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               }\r\n             ],\r\n             "subnets":[\r\n           null\r\n             ],\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--security-rules', $('Remove the security-rules value.'))
  .option('--default-security-rules', $('Remove the default-security-rules value.'))
  .option('--network-interfaces', $('Remove the network-interfaces value.'))
  .option('--subnets', $('Remove the subnets value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup';
    var anySubItem = false || options.etag || options.securityRules || options.defaultSecurityRules || options.networkInterfaces || options.subnets || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.securityRules) {
        subItemPath = options.path + '/securityRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.defaultSecurityRules) {
        subItemPath = options.path + '/defaultSecurityRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkInterfaces) {
        subItemPath = options.path + '/networkInterfaces';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnets) {
        subItemPath = options.path + '/subnets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-security-group
  var catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.category('network-security-group')
  .description($('Commands to set/remove/add network-security-group of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.command('add')
  .description($('Add network-security-group in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkSecurityGroup" : {\r\n             "etag":"",\r\n             "securityRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "description":"",\r\n                 "protocol":"",\r\n                 "sourcePortRange":"",\r\n                 "destinationPortRange":"",\r\n                 "sourceAddressPrefix":"",\r\n                 "destinationAddressPrefix":"",\r\n                 "access":"",\r\n                 "priority":null,\r\n                 "direction":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "defaultSecurityRules":[\r\n           null\r\n             ],\r\n             "networkInterfaces":[\r\n               {\r\n                 "etag":"",\r\n                 "virtualMachine":{\r\n                   "id":""\r\n                 },\r\n                 "networkSecurityGroup":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "backendIPConfigurations":[\r\n           null\r\n                         ],\r\n                         "loadBalancingRules":[\r\n           null\r\n                         ],\r\n                         "outboundNatRule":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "frontendIPConfiguration":null,\r\n                         "backendIPConfiguration":null,\r\n                         "protocol":"",\r\n                         "frontendPort":null,\r\n                         "backendPort":null,\r\n                         "idleTimeoutInMinutes":null,\r\n                         "enableFloatingIP":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":{\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "networkSecurityGroup":null,\r\n                       "routeTable":{\r\n                         "etag":"",\r\n                         "routes":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "addressPrefix":"",\r\n                             "nextHopType":"",\r\n                             "nextHopIpAddress":"",\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "subnets":[\r\n           null\r\n                         ],\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":null,\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     },\r\n                     "publicIPAddress":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "dnsSettings":{\r\n                   "dnsServers":[\r\n                     ""\r\n                   ],\r\n                   "appliedDnsServers":[\r\n                     ""\r\n                   ],\r\n                   "internalDnsNameLabel":"",\r\n                   "internalFqdn":""\r\n                 },\r\n                 "macAddress":"",\r\n                 "primary":null,\r\n                 "enableIPForwarding":null,\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               }\r\n             ],\r\n             "subnets":[\r\n           null\r\n             ],\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--security-rules <securityRules>', $('Add the security-rules value.'))
  .option('--default-security-rules <defaultSecurityRules>', $('Add the default-security-rules value.'))
  .option('--network-interfaces <networkInterfaces>', $('Add the network-interfaces value.'))
  .option('--subnets <subnets>', $('Add the subnets value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'securityRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.securityRules) {
      if (options.parse && options.securityRules) {
        options.securityRules = JSON.parse(options.securityRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.securityRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'defaultSecurityRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.defaultSecurityRules) {
      if (options.parse && options.defaultSecurityRules) {
        options.defaultSecurityRules = JSON.parse(options.defaultSecurityRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.defaultSecurityRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'networkInterfaces';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkInterfaces) {
      if (options.parse && options.networkInterfaces) {
        options.networkInterfaces = JSON.parse(options.networkInterfaces);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaces}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set security-rules
  var catparametersCreateOrUpdateVirtualNetworksSecurityRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSecurityRules0 = catparametersCreateOrUpdateVirtualNetworksSecurityRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksSecurityRules0 = parametersCreateOrUpdateVirtualNetworksSecurityRules0.category('security-rules')
  .description($('Commands to set/remove/add security-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksSecurityRules0.command('set')
  .description($('Set security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "securityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--description <description>', $('Set the description value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--source-port-range <sourcePortRange>', $('Set the source-port-range value.'))
  .option('--destination-port-range <destinationPortRange>', $('Set the destination-port-range value.'))
  .option('--source-address-prefix <sourceAddressPrefix>', $('Set the source-address-prefix value.'))
  .option('--destination-address-prefix <destinationAddressPrefix>', $('Set the destination-address-prefix value.'))
  .option('--access <access>', $('Set the access value.'))
  .option('--priority <priority>', $('Set the priority value.'))
  .option('--direction <direction>', $('Set the direction value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'sourcePortRange';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourcePortRange) {
      if (options.parse && options.sourcePortRange) {
        options.sourcePortRange = JSON.parse(options.sourcePortRange);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourcePortRange}]);
    }
    paramPath = options.path + '/' + 'destinationPortRange';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.destinationPortRange) {
      if (options.parse && options.destinationPortRange) {
        options.destinationPortRange = JSON.parse(options.destinationPortRange);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.destinationPortRange}]);
    }
    paramPath = options.path + '/' + 'sourceAddressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceAddressPrefix) {
      if (options.parse && options.sourceAddressPrefix) {
        options.sourceAddressPrefix = JSON.parse(options.sourceAddressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceAddressPrefix}]);
    }
    paramPath = options.path + '/' + 'destinationAddressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.destinationAddressPrefix) {
      if (options.parse && options.destinationAddressPrefix) {
        options.destinationAddressPrefix = JSON.parse(options.destinationAddressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.destinationAddressPrefix}]);
    }
    paramPath = options.path + '/' + 'access';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.access) {
      if (options.parse && options.access) {
        options.access = JSON.parse(options.access);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.access}]);
    }
    paramPath = options.path + '/' + 'priority';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.priority) {
      if (options.parse && options.priority) {
        options.priority = JSON.parse(options.priority);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.priority}]);
    }
    paramPath = options.path + '/' + 'direction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.direction) {
      if (options.parse && options.direction) {
        options.direction = JSON.parse(options.direction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.direction}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove security-rules
  var catparametersCreateOrUpdateVirtualNetworksSecurityRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSecurityRules1 = catparametersCreateOrUpdateVirtualNetworksSecurityRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSecurityRules1 = parametersCreateOrUpdateVirtualNetworksSecurityRules1.category('security-rules')
  .description($('Commands to set/remove/add security-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSecurityRules1.command('remove')
  .description($('Remove security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "securityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--description', $('Remove the description value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--source-port-range', $('Remove the source-port-range value.'))
  .option('--destination-port-range', $('Remove the destination-port-range value.'))
  .option('--source-address-prefix', $('Remove the source-address-prefix value.'))
  .option('--destination-address-prefix', $('Remove the destination-address-prefix value.'))
  .option('--access', $('Remove the access value.'))
  .option('--priority', $('Remove the priority value.'))
  .option('--direction', $('Remove the direction value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.description || options.protocol || options.sourcePortRange || options.destinationPortRange || options.sourceAddressPrefix || options.destinationAddressPrefix || options.access || options.priority || options.direction || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.description) {
        subItemPath = options.path + '/description';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourcePortRange) {
        subItemPath = options.path + '/sourcePortRange';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.destinationPortRange) {
        subItemPath = options.path + '/destinationPortRange';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sourceAddressPrefix) {
        subItemPath = options.path + '/sourceAddressPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.destinationAddressPrefix) {
        subItemPath = options.path + '/destinationAddressPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.access) {
        subItemPath = options.path + '/access';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.priority) {
        subItemPath = options.path + '/priority';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.direction) {
        subItemPath = options.path + '/direction';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add security-rules
  var catparametersCreateOrUpdateVirtualNetworksSecurityRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSecurityRules2 = catparametersCreateOrUpdateVirtualNetworksSecurityRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSecurityRules2 = parametersCreateOrUpdateVirtualNetworksSecurityRules2.category('security-rules')
  .description($('Commands to set/remove/add security-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSecurityRules2.command('add')
  .description($('Add security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "securityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--description <description>', $('Add the description value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--source-port-range <sourcePortRange>', $('Add the source-port-range value.'))
  .option('--destination-port-range <destinationPortRange>', $('Add the destination-port-range value.'))
  .option('--source-address-prefix <sourceAddressPrefix>', $('Add the source-address-prefix value.'))
  .option('--destination-address-prefix <destinationAddressPrefix>', $('Add the destination-address-prefix value.'))
  .option('--access <access>', $('Add the access value.'))
  .option('--priority <priority>', $('Add the priority value.'))
  .option('--direction <direction>', $('Add the direction value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'description';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.description) {
      if (options.parse && options.description) {
        options.description = JSON.parse(options.description);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.description}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'sourcePortRange';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourcePortRange) {
      if (options.parse && options.sourcePortRange) {
        options.sourcePortRange = JSON.parse(options.sourcePortRange);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourcePortRange}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'destinationPortRange';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.destinationPortRange) {
      if (options.parse && options.destinationPortRange) {
        options.destinationPortRange = JSON.parse(options.destinationPortRange);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.destinationPortRange}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'sourceAddressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.sourceAddressPrefix) {
      if (options.parse && options.sourceAddressPrefix) {
        options.sourceAddressPrefix = JSON.parse(options.sourceAddressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceAddressPrefix}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'destinationAddressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.destinationAddressPrefix) {
      if (options.parse && options.destinationAddressPrefix) {
        options.destinationAddressPrefix = JSON.parse(options.destinationAddressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.destinationAddressPrefix}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'access';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.access) {
      if (options.parse && options.access) {
        options.access = JSON.parse(options.access);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.access}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'priority';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.priority) {
      if (options.parse && options.priority) {
        options.priority = JSON.parse(options.priority);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.priority}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'direction';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.direction) {
      if (options.parse && options.direction) {
        options.direction = JSON.parse(options.direction);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.direction}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/securityRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set default-security-rules
  var catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0 = catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0 = parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0.category('default-security-rules')
  .description($('Commands to set/remove/add default-security-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules0.command('set')
  .description($('Set default-security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "defaultSecurityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/defaultSecurityRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove default-security-rules
  var catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1 = catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1 = parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1.category('default-security-rules')
  .description($('Commands to set/remove/add default-security-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules1.command('remove')
  .description($('Remove default-security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "defaultSecurityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/defaultSecurityRules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add default-security-rules
  var catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2 = catparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2 = parametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2.category('default-security-rules')
  .description($('Commands to set/remove/add default-security-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDefaultSecurityRules2.command('add')
  .description($('Add default-security-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "defaultSecurityRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "description":"",\r\n             "protocol":"",\r\n             "sourcePortRange":"",\r\n             "destinationPortRange":"",\r\n             "sourceAddressPrefix":"",\r\n             "destinationAddressPrefix":"",\r\n             "access":"",\r\n             "priority":null,\r\n             "direction":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/defaultSecurityRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--virtual-machine <virtualMachine>', $('Set the virtual-machine value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--mac-address <macAddress>', $('Set the mac-address value.'))
  .option('--primary <primary>', $('Set the primary value.'))
  .option('--enable-ip-forwarding <enableIPForwarding>', $('Set the enable-ip-forwarding value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'virtualMachine';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachine) {
      if (options.parse && options.virtualMachine) {
        options.virtualMachine = JSON.parse(options.virtualMachine);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachine}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'macAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.macAddress) {
      if (options.parse && options.macAddress) {
        options.macAddress = JSON.parse(options.macAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.macAddress}]);
    }
    paramPath = options.path + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = options.path + '/' + 'enableIPForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableIPForwarding) {
      if (options.parse && options.enableIPForwarding) {
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      }
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableIPForwarding}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.command('remove')
  .description($('Remove network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--virtual-machine', $('Remove the virtual-machine value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--mac-address', $('Remove the mac-address value.'))
  .option('--primary', $('Remove the primary value.'))
  .option('--enable-ip-forwarding', $('Remove the enable-ip-forwarding value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.etag || options.virtualMachine || options.networkSecurityGroup || options.ipConfigurations || options.dnsSettings || options.macAddress || options.primary || options.enableIPForwarding || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachine) {
        subItemPath = options.path + '/virtualMachine';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        subItemPath = options.path + '/dnsSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.macAddress) {
        subItemPath = options.path + '/macAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableIPForwarding) {
        subItemPath = options.path + '/enableIPForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--virtual-machine <virtualMachine>', $('Add the virtual-machine value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--mac-address <macAddress>', $('Add the mac-address value.'))
  .option('--primary <primary>', $('Add the primary value.'))
  .option('--enable-ip-forwarding <enableIPForwarding>', $('Add the enable-ip-forwarding value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualMachine';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachine) {
      if (options.parse && options.virtualMachine) {
        options.virtualMachine = JSON.parse(options.virtualMachine);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachine}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'macAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.macAddress) {
      if (options.parse && options.macAddress) {
        options.macAddress = JSON.parse(options.macAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.macAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'enableIPForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableIPForwarding) {
      if (options.parse && options.enableIPForwarding) {
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      }
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableIPForwarding}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine0 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksVirtualMachine0 = parametersCreateOrUpdateVirtualNetworksVirtualMachine0.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksVirtualMachine0.command('set')
  .description($('Set virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine1 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksVirtualMachine1 = parametersCreateOrUpdateVirtualNetworksVirtualMachine1.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksVirtualMachine1.command('remove')
  .description($('Remove virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine2 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksVirtualMachine2 = parametersCreateOrUpdateVirtualNetworksVirtualMachine2.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksVirtualMachine2.command('add')
  .description($('Add virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksNetworkInterfaces0.command('set')
  .description($('Set network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--virtual-machine <virtualMachine>', $('Set the virtual-machine value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Set the network-security-group value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--mac-address <macAddress>', $('Set the mac-address value.'))
  .option('--primary <primary>', $('Set the primary value.'))
  .option('--enable-ip-forwarding <enableIPForwarding>', $('Set the enable-ip-forwarding value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'virtualMachine';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachine) {
      if (options.parse && options.virtualMachine) {
        options.virtualMachine = JSON.parse(options.virtualMachine);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachine}]);
    }
    paramPath = options.path + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'macAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.macAddress) {
      if (options.parse && options.macAddress) {
        options.macAddress = JSON.parse(options.macAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.macAddress}]);
    }
    paramPath = options.path + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = options.path + '/' + 'enableIPForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableIPForwarding) {
      if (options.parse && options.enableIPForwarding) {
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      }
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableIPForwarding}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksNetworkInterfaces1.command('remove')
  .description($('Remove network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--virtual-machine', $('Remove the virtual-machine value.'))
  .option('--network-security-group', $('Remove the network-security-group value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--mac-address', $('Remove the mac-address value.'))
  .option('--primary', $('Remove the primary value.'))
  .option('--enable-ip-forwarding', $('Remove the enable-ip-forwarding value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.etag || options.virtualMachine || options.networkSecurityGroup || options.ipConfigurations || options.dnsSettings || options.macAddress || options.primary || options.enableIPForwarding || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachine) {
        subItemPath = options.path + '/virtualMachine';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkSecurityGroup) {
        subItemPath = options.path + '/networkSecurityGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        subItemPath = options.path + '/dnsSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.macAddress) {
        subItemPath = options.path + '/macAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableIPForwarding) {
        subItemPath = options.path + '/enableIPForwarding';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-interfaces
  var catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = catparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2 = parametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.category('network-interfaces')
  .description($('Commands to set/remove/add network-interfaces of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksNetworkInterfaces2.command('add')
  .description($('Add network-interfaces in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaces" : {\r\n             "etag":"",\r\n             "virtualMachine":{\r\n               "id":""\r\n             },\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n           null\r\n               ],\r\n               "subnets":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":null,\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "backendIPConfigurations":[\r\n           null\r\n                     ],\r\n                     "loadBalancingRules":[\r\n           null\r\n                     ],\r\n                     "outboundNatRule":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":null,\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":null,\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "dnsSettings":{\r\n               "dnsServers":[\r\n                 ""\r\n               ],\r\n               "appliedDnsServers":[\r\n                 ""\r\n               ],\r\n               "internalDnsNameLabel":"",\r\n               "internalFqdn":""\r\n             },\r\n             "macAddress":"",\r\n             "primary":null,\r\n             "enableIPForwarding":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--virtual-machine <virtualMachine>', $('Add the virtual-machine value.'))
  .option('--network-security-group <networkSecurityGroup>', $('Add the network-security-group value.'))
  .option('--ip-configurations <ipConfigurations>', $('Add the ip-configurations value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--mac-address <macAddress>', $('Add the mac-address value.'))
  .option('--primary <primary>', $('Add the primary value.'))
  .option('--enable-ip-forwarding <enableIPForwarding>', $('Add the enable-ip-forwarding value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'virtualMachine';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.virtualMachine) {
      if (options.parse && options.virtualMachine) {
        options.virtualMachine = JSON.parse(options.virtualMachine);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachine}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'networkSecurityGroup';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.networkSecurityGroup) {
      if (options.parse && options.networkSecurityGroup) {
        options.networkSecurityGroup = JSON.parse(options.networkSecurityGroup);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkSecurityGroup}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'ipConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfigurations) {
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'macAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.macAddress) {
      if (options.parse && options.macAddress) {
        options.macAddress = JSON.parse(options.macAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.macAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'primary';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.primary) {
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
        options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'enableIPForwarding';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableIPForwarding) {
      if (options.parse && options.enableIPForwarding) {
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      }
        options.enableIPForwarding = JSON.parse(options.enableIPForwarding);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableIPForwarding}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces' + (options.index ? ('/' + options.index) : '') + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine0 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksVirtualMachine0 = parametersCreateOrUpdateVirtualNetworksVirtualMachine0.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksVirtualMachine0.command('set')
  .description($('Set virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine';
    var paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine1 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksVirtualMachine1 = parametersCreateOrUpdateVirtualNetworksVirtualMachine1.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksVirtualMachine1.command('remove')
  .description($('Remove virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add virtual-machine
  var catparametersCreateOrUpdateVirtualNetworksVirtualMachine2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksVirtualMachine2 = catparametersCreateOrUpdateVirtualNetworksVirtualMachine2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksVirtualMachine2 = parametersCreateOrUpdateVirtualNetworksVirtualMachine2.category('virtual-machine')
  .description($('Commands to set/remove/add virtual-machine of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksVirtualMachine2.command('add')
  .description($('Add virtual-machine in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachine" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/virtualMachine' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove network-security-group
  var catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1 = parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.category('network-security-group')
  .description($('Commands to set/remove/add network-security-group of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup1.command('remove')
  .description($('Remove network-security-group in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkSecurityGroup" : {\r\n             "etag":"",\r\n             "securityRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "description":"",\r\n                 "protocol":"",\r\n                 "sourcePortRange":"",\r\n                 "destinationPortRange":"",\r\n                 "sourceAddressPrefix":"",\r\n                 "destinationAddressPrefix":"",\r\n                 "access":"",\r\n                 "priority":null,\r\n                 "direction":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "defaultSecurityRules":[\r\n           null\r\n             ],\r\n             "networkInterfaces":[\r\n               {\r\n                 "etag":"",\r\n                 "virtualMachine":{\r\n                   "id":""\r\n                 },\r\n                 "networkSecurityGroup":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "backendIPConfigurations":[\r\n           null\r\n                         ],\r\n                         "loadBalancingRules":[\r\n           null\r\n                         ],\r\n                         "outboundNatRule":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "frontendIPConfiguration":null,\r\n                         "backendIPConfiguration":null,\r\n                         "protocol":"",\r\n                         "frontendPort":null,\r\n                         "backendPort":null,\r\n                         "idleTimeoutInMinutes":null,\r\n                         "enableFloatingIP":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":{\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "networkSecurityGroup":null,\r\n                       "routeTable":{\r\n                         "etag":"",\r\n                         "routes":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "addressPrefix":"",\r\n                             "nextHopType":"",\r\n                             "nextHopIpAddress":"",\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "subnets":[\r\n           null\r\n                         ],\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":null,\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     },\r\n                     "publicIPAddress":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "dnsSettings":{\r\n                   "dnsServers":[\r\n                     ""\r\n                   ],\r\n                   "appliedDnsServers":[\r\n                     ""\r\n                   ],\r\n                   "internalDnsNameLabel":"",\r\n                   "internalFqdn":""\r\n                 },\r\n                 "macAddress":"",\r\n                 "primary":null,\r\n                 "enableIPForwarding":null,\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               }\r\n             ],\r\n             "subnets":[\r\n           null\r\n             ],\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/networkSecurityGroup';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add network-security-group
  var catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = catparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2 = parametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.category('network-security-group')
  .description($('Commands to set/remove/add network-security-group of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksNetworkSecurityGroup2.command('add')
  .description($('Add network-security-group in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "networkSecurityGroup" : {\r\n             "etag":"",\r\n             "securityRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "description":"",\r\n                 "protocol":"",\r\n                 "sourcePortRange":"",\r\n                 "destinationPortRange":"",\r\n                 "sourceAddressPrefix":"",\r\n                 "destinationAddressPrefix":"",\r\n                 "access":"",\r\n                 "priority":null,\r\n                 "direction":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "defaultSecurityRules":[\r\n           null\r\n             ],\r\n             "networkInterfaces":[\r\n               {\r\n                 "etag":"",\r\n                 "virtualMachine":{\r\n                   "id":""\r\n                 },\r\n                 "networkSecurityGroup":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "backendIPConfigurations":[\r\n           null\r\n                         ],\r\n                         "loadBalancingRules":[\r\n           null\r\n                         ],\r\n                         "outboundNatRule":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "frontendIPConfiguration":null,\r\n                         "backendIPConfiguration":null,\r\n                         "protocol":"",\r\n                         "frontendPort":null,\r\n                         "backendPort":null,\r\n                         "idleTimeoutInMinutes":null,\r\n                         "enableFloatingIP":null,\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":{\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "networkSecurityGroup":null,\r\n                       "routeTable":{\r\n                         "etag":"",\r\n                         "routes":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "addressPrefix":"",\r\n                             "nextHopType":"",\r\n                             "nextHopIpAddress":"",\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "subnets":[\r\n           null\r\n                         ],\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":null,\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     },\r\n                     "publicIPAddress":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "dnsSettings":{\r\n                   "dnsServers":[\r\n                     ""\r\n                   ],\r\n                   "appliedDnsServers":[\r\n                     ""\r\n                   ],\r\n                   "internalDnsNameLabel":"",\r\n                   "internalFqdn":""\r\n                 },\r\n                 "macAddress":"",\r\n                 "primary":null,\r\n                 "enableIPForwarding":null,\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               }\r\n             ],\r\n             "subnets":[\r\n           null\r\n             ],\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/networkSecurityGroup' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = parametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Set the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules <loadBalancerInboundNatRules>', $('Set the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'loadBalancerInboundNatRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerInboundNatRules) {
      if (options.parse && options.loadBalancerInboundNatRules) {
        options.loadBalancerInboundNatRules = JSON.parse(options.loadBalancerInboundNatRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatRules}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = parametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--load-balancer-backend-address-pools', $('Remove the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules', $('Remove the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.loadBalancerBackendAddressPools || options.loadBalancerInboundNatRules || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerBackendAddressPools) {
        subItemPath = options.path + '/loadBalancerBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerInboundNatRules) {
        subItemPath = options.path + '/loadBalancerInboundNatRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = parametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Add the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules <loadBalancerInboundNatRules>', $('Add the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerInboundNatRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerInboundNatRules) {
      if (options.parse && options.loadBalancerInboundNatRules) {
        options.loadBalancerInboundNatRules = JSON.parse(options.loadBalancerInboundNatRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.command('set')
  .description($('Set load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Set the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Set the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Set the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = options.path + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = options.path + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.command('remove')
  .description($('Remove load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--backend-ip-configurations', $('Remove the backend-ip-configurations value.'))
  .option('--load-balancing-rules', $('Remove the load-balancing-rules value.'))
  .option('--outbound-nat-rule', $('Remove the outbound-nat-rule value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.backendIPConfigurations || options.loadBalancingRules || options.outboundNatRule || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfigurations) {
        subItemPath = options.path + '/backendIPConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancingRules) {
        subItemPath = options.path + '/loadBalancingRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.outboundNatRule) {
        subItemPath = options.path + '/outboundNatRule';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.command('add')
  .description($('Add load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Add the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Add the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Add the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.command('set')
  .description($('Set backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.command('remove')
  .description($('Remove backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.command('add')
  .description($('Add backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.command('set')
  .description($('Set load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.command('remove')
  .description($('Remove load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.command('add')
  .description($('Add load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.command('set')
  .description($('Set load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Set the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Set the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Set the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = options.path + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = options.path + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.command('remove')
  .description($('Remove load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--backend-ip-configurations', $('Remove the backend-ip-configurations value.'))
  .option('--load-balancing-rules', $('Remove the load-balancing-rules value.'))
  .option('--outbound-nat-rule', $('Remove the outbound-nat-rule value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.backendIPConfigurations || options.loadBalancingRules || options.outboundNatRule || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfigurations) {
        subItemPath = options.path + '/backendIPConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancingRules) {
        subItemPath = options.path + '/loadBalancingRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.outboundNatRule) {
        subItemPath = options.path + '/outboundNatRule';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.command('add')
  .description($('Add load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Add the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Add the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Add the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.command('set')
  .description($('Set backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.command('remove')
  .description($('Remove backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.command('add')
  .description($('Add backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.command('set')
  .description($('Set load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.command('remove')
  .description($('Remove load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.command('add')
  .description($('Add load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove outbound-nat-rule
  var catparametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = catparametersCreateOrUpdateVirtualNetworksOutboundNatRule1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = parametersCreateOrUpdateVirtualNetworksOutboundNatRule1.category('outbound-nat-rule')
  .description($('Commands to set/remove/add outbound-nat-rule of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksOutboundNatRule1.command('remove')
  .description($('Remove outbound-nat-rule in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "outboundNatRule" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/outboundNatRule';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add outbound-nat-rule
  var catparametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = catparametersCreateOrUpdateVirtualNetworksOutboundNatRule2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = parametersCreateOrUpdateVirtualNetworksOutboundNatRule2.category('outbound-nat-rule')
  .description($('Commands to set/remove/add outbound-nat-rule of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksOutboundNatRule2.command('add')
  .description($('Add outbound-nat-rule in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "outboundNatRule" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/outboundNatRule' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.command('remove')
  .description($('Remove frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.command('remove')
  .description($('Remove frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.category('backend-ip-configuration')
  .description($('Commands to set/remove/add backend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.command('remove')
  .description($('Remove backend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/backendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.category('backend-ip-configuration')
  .description($('Commands to set/remove/add backend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.command('add')
  .description($('Add backend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/backendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = parametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Set the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules <loadBalancerInboundNatRules>', $('Set the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'loadBalancerInboundNatRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerInboundNatRules) {
      if (options.parse && options.loadBalancerInboundNatRules) {
        options.loadBalancerInboundNatRules = JSON.parse(options.loadBalancerInboundNatRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatRules}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = parametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--load-balancer-backend-address-pools', $('Remove the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules', $('Remove the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.loadBalancerBackendAddressPools || options.loadBalancerInboundNatRules || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerBackendAddressPools) {
        subItemPath = options.path + '/loadBalancerBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerInboundNatRules) {
        subItemPath = options.path + '/loadBalancerInboundNatRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = parametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Add the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-rules <loadBalancerInboundNatRules>', $('Add the load-balancer-inbound-nat-rules value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerBackendAddressPools';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerBackendAddressPools) {
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancerInboundNatRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancerInboundNatRules) {
      if (options.parse && options.loadBalancerInboundNatRules) {
        options.loadBalancerInboundNatRules = JSON.parse(options.loadBalancerInboundNatRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.command('set')
  .description($('Set load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Set the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Set the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Set the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = options.path + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = options.path + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.command('remove')
  .description($('Remove load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--backend-ip-configurations', $('Remove the backend-ip-configurations value.'))
  .option('--load-balancing-rules', $('Remove the load-balancing-rules value.'))
  .option('--outbound-nat-rule', $('Remove the outbound-nat-rule value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.backendIPConfigurations || options.loadBalancingRules || options.outboundNatRule || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfigurations) {
        subItemPath = options.path + '/backendIPConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancingRules) {
        subItemPath = options.path + '/loadBalancingRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.outboundNatRule) {
        subItemPath = options.path + '/outboundNatRule';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.command('add')
  .description($('Add load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Add the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Add the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Add the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.command('set')
  .description($('Set backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.command('remove')
  .description($('Remove backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.command('add')
  .description($('Add backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.command('set')
  .description($('Set load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.command('remove')
  .description($('Remove load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.command('add')
  .description($('Add load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools0.command('set')
  .description($('Set load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Set the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Set the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Set the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = options.path + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = options.path + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools1.command('remove')
  .description($('Remove load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--backend-ip-configurations', $('Remove the backend-ip-configurations value.'))
  .option('--load-balancing-rules', $('Remove the load-balancing-rules value.'))
  .option('--outbound-nat-rule', $('Remove the outbound-nat-rule value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.backendIPConfigurations || options.loadBalancingRules || options.outboundNatRule || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfigurations) {
        subItemPath = options.path + '/backendIPConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancingRules) {
        subItemPath = options.path + '/loadBalancingRules';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.outboundNatRule) {
        subItemPath = options.path + '/outboundNatRule';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.category('load-balancer-backend-address-pools')
  .description($('Commands to set/remove/add load-balancer-backend-address-pools of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerBackendAddressPools2.command('add')
  .description($('Add load-balancer-backend-address-pools in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "backendIPConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "loadBalancerBackendAddressPools":[\r\n           null\r\n                 ],\r\n                 "loadBalancerInboundNatRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "frontendIPConfiguration":{\r\n                       "id":""\r\n                     },\r\n                     "backendIPConfiguration":null,\r\n                     "protocol":"",\r\n                     "frontendPort":null,\r\n                     "backendPort":null,\r\n                     "idleTimeoutInMinutes":null,\r\n                     "enableFloatingIP":null,\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "privateIPAddress":"",\r\n                 "privateIPAllocationMethod":"",\r\n                 "subnet":{\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "networkSecurityGroup":{\r\n                     "etag":"",\r\n                     "securityRules":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "description":"",\r\n                         "protocol":"",\r\n                         "sourcePortRange":"",\r\n                         "destinationPortRange":"",\r\n                         "sourceAddressPrefix":"",\r\n                         "destinationAddressPrefix":"",\r\n                         "access":"",\r\n                         "priority":null,\r\n                         "direction":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "defaultSecurityRules":[\r\n           null\r\n                     ],\r\n                     "networkInterfaces":[\r\n                       {\r\n                         "etag":"",\r\n                         "virtualMachine":null,\r\n                         "networkSecurityGroup":null,\r\n                         "ipConfigurations":[\r\n           null\r\n                         ],\r\n                         "dnsSettings":{\r\n                           "dnsServers":[\r\n                             ""\r\n                           ],\r\n                           "appliedDnsServers":[\r\n                             ""\r\n                           ],\r\n                           "internalDnsNameLabel":"",\r\n                           "internalFqdn":""\r\n                         },\r\n                         "macAddress":"",\r\n                         "primary":null,\r\n                         "enableIPForwarding":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "routeTable":{\r\n                     "etag":"",\r\n                     "routes":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "addressPrefix":"",\r\n                         "nextHopType":"",\r\n                         "nextHopIpAddress":"",\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "subnets":[\r\n           null\r\n                     ],\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":null,\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 },\r\n                 "publicIPAddress":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancingRules":[\r\n           null\r\n             ],\r\n             "outboundNatRule":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--backend-ip-configurations <backendIPConfigurations>', $('Add the backend-ip-configurations value.'))
  .option('--load-balancing-rules <loadBalancingRules>', $('Add the load-balancing-rules value.'))
  .option('--outbound-nat-rule <outboundNatRule>', $('Add the outbound-nat-rule value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfigurations';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfigurations) {
      if (options.parse && options.backendIPConfigurations) {
        options.backendIPConfigurations = JSON.parse(options.backendIPConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfigurations}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'loadBalancingRules';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.loadBalancingRules) {
      if (options.parse && options.loadBalancingRules) {
        options.loadBalancingRules = JSON.parse(options.loadBalancingRules);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancingRules}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'outboundNatRule';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.outboundNatRule) {
      if (options.parse && options.outboundNatRule) {
        options.outboundNatRule = JSON.parse(options.outboundNatRule);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.outboundNatRule}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations0.command('set')
  .description($('Set backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations1.command('remove')
  .description($('Remove backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.category('backend-ip-configurations')
  .description($('Commands to set/remove/add backend-ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfigurations2.command('add')
  .description($('Add backend-ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/backendIPConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancingRules0.command('set')
  .description($('Set load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancingRules1.command('remove')
  .description($('Remove load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancing-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.category('load-balancing-rules')
  .description($('Commands to set/remove/add load-balancing-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancingRules2.command('add')
  .description($('Add load-balancing-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancingRules" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/loadBalancingRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove outbound-nat-rule
  var catparametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = catparametersCreateOrUpdateVirtualNetworksOutboundNatRule1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksOutboundNatRule1 = parametersCreateOrUpdateVirtualNetworksOutboundNatRule1.category('outbound-nat-rule')
  .description($('Commands to set/remove/add outbound-nat-rule of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksOutboundNatRule1.command('remove')
  .description($('Remove outbound-nat-rule in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "outboundNatRule" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-backend-address-pools-index <load-balancer-backend-address-pools-index>', $('Indexer: load-balancer-backend-address-pools-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/outboundNatRule';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add outbound-nat-rule
  var catparametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = catparametersCreateOrUpdateVirtualNetworksOutboundNatRule2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksOutboundNatRule2 = parametersCreateOrUpdateVirtualNetworksOutboundNatRule2.category('outbound-nat-rule')
  .description($('Commands to set/remove/add outbound-nat-rule of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksOutboundNatRule2.command('add')
  .description($('Add outbound-nat-rule in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "outboundNatRule" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools/' + options.loadBalancerBackendAddressPoolsIndex + '/outboundNatRule' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.command('remove')
  .description($('Remove frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules0.command('set')
  .description($('Set load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Set the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Set the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Set the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Set the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Set the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = options.path + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = options.path + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules1.command('remove')
  .description($('Remove load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--frontend-ip-configuration', $('Remove the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration', $('Remove the backend-ip-configuration value.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--frontend-port', $('Remove the frontend-port value.'))
  .option('--backend-port', $('Remove the backend-port value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip', $('Remove the enable-floating-ip value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.frontendIPConfiguration || options.backendIPConfiguration || options.protocol || options.frontendPort || options.backendPort || options.idleTimeoutInMinutes || options.enableFloatingIP || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendIPConfiguration) {
        subItemPath = options.path + '/frontendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendIPConfiguration) {
        subItemPath = options.path + '/backendIPConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.frontendPort) {
        subItemPath = options.path + '/frontendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.backendPort) {
        subItemPath = options.path + '/backendPort';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableFloatingIP) {
        subItemPath = options.path + '/enableFloatingIP';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add load-balancer-inbound-nat-rules
  var catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = catparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2 = parametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.category('load-balancer-inbound-nat-rules')
  .description($('Commands to set/remove/add load-balancer-inbound-nat-rules of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksLoadBalancerInboundNatRules2.command('add')
  .description($('Add load-balancer-inbound-nat-rules in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatRules" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "frontendIPConfiguration":{\r\n               "id":""\r\n             },\r\n             "backendIPConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "loadBalancerBackendAddressPools":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "backendIPConfigurations":[\r\n           null\r\n                   ],\r\n                   "loadBalancingRules":[\r\n           null\r\n                   ],\r\n                   "outboundNatRule":null,\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "loadBalancerInboundNatRules":[\r\n           null\r\n               ],\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":null,\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n           null\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "privateIPAddress":"",\r\n                     "privateIPAllocationMethod":"",\r\n                     "subnet":null,\r\n                     "publicIPAddress":{\r\n                       "etag":"",\r\n                       "publicIPAllocationMethod":"",\r\n                       "ipConfiguration":null,\r\n                       "dnsSettings":{\r\n                         "domainNameLabel":"",\r\n                         "fqdn":"",\r\n                         "reverseFqdn":""\r\n                       },\r\n                       "ipAddress":"",\r\n                       "idleTimeoutInMinutes":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     },\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "protocol":"",\r\n             "frontendPort":null,\r\n             "backendPort":null,\r\n             "idleTimeoutInMinutes":null,\r\n             "enableFloatingIP":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--frontend-ip-configuration <frontendIPConfiguration>', $('Add the frontend-ip-configuration value.'))
  .option('--backend-ip-configuration <backendIPConfiguration>', $('Add the backend-ip-configuration value.'))
  .option('--protocol <protocol>', $('Add the protocol value.'))
  .option('--frontend-port <frontendPort>', $('Add the frontend-port value.'))
  .option('--backend-port <backendPort>', $('Add the backend-port value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--enable-floating-ip <enableFloatingIP>', $('Add the enable-floating-ip value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendIPConfiguration) {
      if (options.parse && options.frontendIPConfiguration) {
        options.frontendIPConfiguration = JSON.parse(options.frontendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendIPConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendIPConfiguration) {
      if (options.parse && options.backendIPConfiguration) {
        options.backendIPConfiguration = JSON.parse(options.backendIPConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendIPConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'protocol';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.protocol) {
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'frontendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.frontendPort) {
      if (options.parse && options.frontendPort) {
        options.frontendPort = JSON.parse(options.frontendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.frontendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'backendPort';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.backendPort) {
      if (options.parse && options.backendPort) {
        options.backendPort = JSON.parse(options.backendPort);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.backendPort}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'enableFloatingIP';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.enableFloatingIP) {
      if (options.parse && options.enableFloatingIP) {
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      }
        options.enableFloatingIP = JSON.parse(options.enableFloatingIP);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableFloatingIP}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration1.command('remove')
  .description($('Remove frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add frontend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.category('frontend-ip-configuration')
  .description($('Commands to set/remove/add frontend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksFrontendIPConfiguration2.command('add')
  .description($('Add frontend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "frontendIPConfiguration" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/frontendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove backend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1 = parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.category('backend-ip-configuration')
  .description($('Commands to set/remove/add backend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration1.command('remove')
  .description($('Remove backend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--load-balancer-inbound-nat-rules-index <load-balancer-inbound-nat-rules-index>', $('Indexer: load-balancer-inbound-nat-rules-index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/backendIPConfiguration';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add backend-ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = catparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2 = parametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.category('backend-ip-configuration')
  .description($('Commands to set/remove/add backend-ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksBackendIPConfiguration2.command('add')
  .description($('Add backend-ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "backendIPConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "backendIPConfigurations":[\r\n           null\r\n                 ],\r\n                 "loadBalancingRules":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "outboundNatRule":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatRules":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "frontendIPConfiguration":null,\r\n                 "backendIPConfiguration":null,\r\n                 "protocol":"",\r\n                 "frontendPort":null,\r\n                 "backendPort":null,\r\n                 "idleTimeoutInMinutes":null,\r\n                 "enableFloatingIP":null,\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":null,\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n           null\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "privateIPAddress":"",\r\n                   "privateIPAllocationMethod":"",\r\n                   "subnet":null,\r\n                   "publicIPAddress":{\r\n                     "etag":"",\r\n                     "publicIPAllocationMethod":"",\r\n                     "ipConfiguration":null,\r\n                     "dnsSettings":{\r\n                       "domainNameLabel":"",\r\n                       "fqdn":"",\r\n                       "reverseFqdn":""\r\n                     },\r\n                     "ipAddress":"",\r\n                     "idleTimeoutInMinutes":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatRules/' + options.loadBalancerInboundNatRulesIndex + '/backendIPConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet1 = catparametersCreateOrUpdateVirtualNetworksSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnet1 = parametersCreateOrUpdateVirtualNetworksSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet2 = catparametersCreateOrUpdateVirtualNetworksSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnet2 = parametersCreateOrUpdateVirtualNetworksSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set public-ip-address
  var catparametersCreateOrUpdateVirtualNetworksPublicIPAddress0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksPublicIPAddress0 = catparametersCreateOrUpdateVirtualNetworksPublicIPAddress0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksPublicIPAddress0 = parametersCreateOrUpdateVirtualNetworksPublicIPAddress0.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksPublicIPAddress0.command('set')
  .description($('Set public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "etag":"",\r\n             "publicIPAllocationMethod":"",\r\n             "ipConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "dnsSettings":{\r\n               "domainNameLabel":"",\r\n               "fqdn":"",\r\n               "reverseFqdn":""\r\n             },\r\n             "ipAddress":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--public-ip-allocation-method <publicIPAllocationMethod>', $('Set the public-ip-allocation-method value.'))
  .option('--ip-configuration <ipConfiguration>', $('Set the ip-configuration value.'))
  .option('--dns-settings <dnsSettings>', $('Set the dns-settings value.'))
  .option('--ip-address <ipAddress>', $('Set the ip-address value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Set the idle-timeout-in-minutes value.'))
  .option('--resource-guid <resourceGuid>', $('Set the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'publicIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAllocationMethod) {
      if (options.parse && options.publicIPAllocationMethod) {
        options.publicIPAllocationMethod = JSON.parse(options.publicIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'ipConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfiguration) {
      if (options.parse && options.ipConfiguration) {
        options.ipConfiguration = JSON.parse(options.ipConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfiguration}]);
    }
    paramPath = options.path + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = options.path + '/' + 'ipAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipAddress) {
      if (options.parse && options.ipAddress) {
        options.ipAddress = JSON.parse(options.ipAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipAddress}]);
    }
    paramPath = options.path + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = options.path + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworksPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworksPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "etag":"",\r\n             "publicIPAllocationMethod":"",\r\n             "ipConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "dnsSettings":{\r\n               "domainNameLabel":"",\r\n               "fqdn":"",\r\n               "reverseFqdn":""\r\n             },\r\n             "ipAddress":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--public-ip-allocation-method', $('Remove the public-ip-allocation-method value.'))
  .option('--ip-configuration', $('Remove the ip-configuration value.'))
  .option('--dns-settings', $('Remove the dns-settings value.'))
  .option('--ip-address', $('Remove the ip-address value.'))
  .option('--idle-timeout-in-minutes', $('Remove the idle-timeout-in-minutes value.'))
  .option('--resource-guid', $('Remove the resource-guid value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress';
    var anySubItem = false || options.etag || options.publicIPAllocationMethod || options.ipConfiguration || options.dnsSettings || options.ipAddress || options.idleTimeoutInMinutes || options.resourceGuid || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAllocationMethod) {
        subItemPath = options.path + '/publicIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfiguration) {
        subItemPath = options.path + '/ipConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dnsSettings) {
        subItemPath = options.path + '/dnsSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipAddress) {
        subItemPath = options.path + '/ipAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.idleTimeoutInMinutes) {
        subItemPath = options.path + '/idleTimeoutInMinutes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.resourceGuid) {
        subItemPath = options.path + '/resourceGuid';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworksPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworksPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "etag":"",\r\n             "publicIPAllocationMethod":"",\r\n             "ipConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "dnsSettings":{\r\n               "domainNameLabel":"",\r\n               "fqdn":"",\r\n               "reverseFqdn":""\r\n             },\r\n             "ipAddress":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--public-ip-allocation-method <publicIPAllocationMethod>', $('Add the public-ip-allocation-method value.'))
  .option('--ip-configuration <ipConfiguration>', $('Add the ip-configuration value.'))
  .option('--dns-settings <dnsSettings>', $('Add the dns-settings value.'))
  .option('--ip-address <ipAddress>', $('Add the ip-address value.'))
  .option('--idle-timeout-in-minutes <idleTimeoutInMinutes>', $('Add the idle-timeout-in-minutes value.'))
  .option('--resource-guid <resourceGuid>', $('Add the resource-guid value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'publicIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAllocationMethod) {
      if (options.parse && options.publicIPAllocationMethod) {
        options.publicIPAllocationMethod = JSON.parse(options.publicIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'ipConfiguration';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipConfiguration) {
      if (options.parse && options.ipConfiguration) {
        options.ipConfiguration = JSON.parse(options.ipConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfiguration}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'dnsSettings';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsSettings) {
      if (options.parse && options.dnsSettings) {
        options.dnsSettings = JSON.parse(options.dnsSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsSettings}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'ipAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.ipAddress) {
      if (options.parse && options.ipAddress) {
        options.ipAddress = JSON.parse(options.ipAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'idleTimeoutInMinutes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.idleTimeoutInMinutes) {
      if (options.parse && options.idleTimeoutInMinutes) {
        options.idleTimeoutInMinutes = JSON.parse(options.idleTimeoutInMinutes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.idleTimeoutInMinutes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'resourceGuid';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.resourceGuid) {
      if (options.parse && options.resourceGuid) {
        options.resourceGuid = JSON.parse(options.resourceGuid);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.resourceGuid}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration0 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = parametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfiguration0.command('set')
  .description($('Set ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration1 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = parametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1.command('remove')
  .description($('Remove ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration2 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = parametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfiguration2.command('add')
  .description($('Add ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration0 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = parametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfiguration0.command('set')
  .description($('Set ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration1 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = parametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1.command('remove')
  .description($('Remove ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration2 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = parametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfiguration2.command('add')
  .description($('Add ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet1 = catparametersCreateOrUpdateVirtualNetworksSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnet1 = parametersCreateOrUpdateVirtualNetworksSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/subnet';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet2 = catparametersCreateOrUpdateVirtualNetworksSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnet2 = parametersCreateOrUpdateVirtualNetworksSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration0 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = parametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfiguration0.command('set')
  .description($('Set ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration1 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = parametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1.command('remove')
  .description($('Remove ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration2 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = parametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfiguration2.command('add')
  .description($('Add ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration0 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfiguration0 = parametersCreateOrUpdateVirtualNetworksIpConfiguration0.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfiguration0.command('set')
  .description($('Set ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Set the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Set the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Set the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = options.path + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = options.path + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration1 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1 = parametersCreateOrUpdateVirtualNetworksIpConfiguration1.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfiguration1.command('remove')
  .description($('Remove ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--private-ip-address', $('Remove the private-ip-address value.'))
  .option('--private-ip-allocation-method', $('Remove the private-ip-allocation-method value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--public-ip-address', $('Remove the public-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration';
    var anySubItem = false || options.name || options.etag || options.privateIPAddress || options.privateIPAllocationMethod || options.subnet || options.publicIPAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAddress) {
        subItemPath = options.path + '/privateIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.privateIPAllocationMethod) {
        subItemPath = options.path + '/privateIPAllocationMethod';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publicIPAddress) {
        subItemPath = options.path + '/publicIPAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configuration
  var catparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfiguration2 = catparametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfiguration2 = parametersCreateOrUpdateVirtualNetworksIpConfiguration2.category('ip-configuration')
  .description($('Commands to set/remove/add ip-configuration of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfiguration2.command('add')
  .description($('Add ip-configuration in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfiguration" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--private-ip-address <privateIPAddress>', $('Add the private-ip-address value.'))
  .option('--private-ip-allocation-method <privateIPAllocationMethod>', $('Add the private-ip-allocation-method value.'))
  .option('--subnet <subnet>', $('Add the subnet value.'))
  .option('--public-ip-address <publicIPAddress>', $('Add the public-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAddress) {
      if (options.parse && options.privateIPAddress) {
        options.privateIPAddress = JSON.parse(options.privateIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'privateIPAllocationMethod';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.privateIPAllocationMethod) {
      if (options.parse && options.privateIPAllocationMethod) {
        options.privateIPAllocationMethod = JSON.parse(options.privateIPAllocationMethod);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.privateIPAllocationMethod}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'subnet';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnet) {
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'publicIPAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.publicIPAddress) {
      if (options.parse && options.publicIPAddress) {
        options.publicIPAddress = JSON.parse(options.publicIPAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicIPAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet1 = catparametersCreateOrUpdateVirtualNetworksSubnet1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnet1 = parametersCreateOrUpdateVirtualNetworksSubnet1.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnet1.command('remove')
  .description($('Remove subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/subnet';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnet
  var catparametersCreateOrUpdateVirtualNetworksSubnet2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnet2 = catparametersCreateOrUpdateVirtualNetworksSubnet2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnet2 = parametersCreateOrUpdateVirtualNetworksSubnet2.category('subnet')
  .description($('Commands to set/remove/add subnet of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnet2.command('add')
  .description($('Add subnet in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/subnet' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove public-ip-address
  var catparametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = catparametersCreateOrUpdateVirtualNetworksPublicIPAddress1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksPublicIPAddress1 = parametersCreateOrUpdateVirtualNetworksPublicIPAddress1.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksPublicIPAddress1.command('remove')
  .description($('Remove public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "etag":"",\r\n             "publicIPAllocationMethod":"",\r\n             "ipConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "dnsSettings":{\r\n               "domainNameLabel":"",\r\n               "fqdn":"",\r\n               "reverseFqdn":""\r\n             },\r\n             "ipAddress":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/publicIPAddress';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add public-ip-address
  var catparametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = catparametersCreateOrUpdateVirtualNetworksPublicIPAddress2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksPublicIPAddress2 = parametersCreateOrUpdateVirtualNetworksPublicIPAddress2.category('public-ip-address')
  .description($('Commands to set/remove/add public-ip-address of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksPublicIPAddress2.command('add')
  .description($('Add public-ip-address in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "publicIPAddress" : {\r\n             "etag":"",\r\n             "publicIPAllocationMethod":"",\r\n             "ipConfiguration":{\r\n               "name":"",\r\n               "etag":"",\r\n               "privateIPAddress":"",\r\n               "privateIPAllocationMethod":"",\r\n               "subnet":{\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":{\r\n                   "etag":"",\r\n                   "routes":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "addressPrefix":"",\r\n                       "nextHopType":"",\r\n                       "nextHopIpAddress":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               },\r\n               "publicIPAddress":null,\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "dnsSettings":{\r\n               "domainNameLabel":"",\r\n               "fqdn":"",\r\n               "reverseFqdn":""\r\n             },\r\n             "ipAddress":"",\r\n             "idleTimeoutInMinutes":null,\r\n             "resourceGuid":"",\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/ipConfiguration/publicIPAddress' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings0 = catparametersCreateOrUpdateVirtualNetworksDnsSettings0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDnsSettings0 = parametersCreateOrUpdateVirtualNetworksDnsSettings0.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDnsSettings0.command('set')
  .description($('Set dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "domainNameLabel":"",\r\n             "fqdn":"",\r\n             "reverseFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Set the domain-name-label value.'))
  .option('--fqdn <fqdn>', $('Set the fqdn value.'))
  .option('--reverse-fqdn <reverseFqdn>', $('Set the reverse-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings';
    var paramPath = options.path + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = options.path + '/' + 'fqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fqdn) {
      if (options.parse && options.fqdn) {
        options.fqdn = JSON.parse(options.fqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fqdn}]);
    }
    paramPath = options.path + '/' + 'reverseFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseFqdn) {
      if (options.parse && options.reverseFqdn) {
        options.reverseFqdn = JSON.parse(options.reverseFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings1 = catparametersCreateOrUpdateVirtualNetworksDnsSettings1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDnsSettings1 = parametersCreateOrUpdateVirtualNetworksDnsSettings1.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDnsSettings1.command('remove')
  .description($('Remove dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "domainNameLabel":"",\r\n             "fqdn":"",\r\n             "reverseFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--domain-name-label', $('Remove the domain-name-label value.'))
  .option('--fqdn', $('Remove the fqdn value.'))
  .option('--reverse-fqdn', $('Remove the reverse-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings';
    var anySubItem = false || options.domainNameLabel || options.fqdn || options.reverseFqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.domainNameLabel) {
        subItemPath = options.path + '/domainNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.fqdn) {
        subItemPath = options.path + '/fqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.reverseFqdn) {
        subItemPath = options.path + '/reverseFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings2 = catparametersCreateOrUpdateVirtualNetworksDnsSettings2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDnsSettings2 = parametersCreateOrUpdateVirtualNetworksDnsSettings2.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDnsSettings2.command('add')
  .description($('Add dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "domainNameLabel":"",\r\n             "fqdn":"",\r\n             "reverseFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--domain-name-label <domainNameLabel>', $('Add the domain-name-label value.'))
  .option('--fqdn <fqdn>', $('Add the fqdn value.'))
  .option('--reverse-fqdn <reverseFqdn>', $('Add the reverse-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings' + '/' + 'domainNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.domainNameLabel) {
      if (options.parse && options.domainNameLabel) {
        options.domainNameLabel = JSON.parse(options.domainNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.domainNameLabel}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings' + '/' + 'fqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.fqdn) {
      if (options.parse && options.fqdn) {
        options.fqdn = JSON.parse(options.fqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.fqdn}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/publicIPAddress/dnsSettings' + '/' + 'reverseFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.reverseFqdn) {
      if (options.parse && options.reverseFqdn) {
        options.reverseFqdn = JSON.parse(options.reverseFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.reverseFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings0 = catparametersCreateOrUpdateVirtualNetworksDnsSettings0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDnsSettings0 = parametersCreateOrUpdateVirtualNetworksDnsSettings0.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDnsSettings0.command('set')
  .description($('Set dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               ""\r\n             ],\r\n             "appliedDnsServers":[\r\n               ""\r\n             ],\r\n             "internalDnsNameLabel":"",\r\n             "internalFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--dns-servers <dnsServers>', $('Set the dns-servers value.'))
  .option('--applied-dns-servers <appliedDnsServers>', $('Set the applied-dns-servers value.'))
  .option('--internal-dns-name-label <internalDnsNameLabel>', $('Set the internal-dns-name-label value.'))
  .option('--internal-fqdn <internalFqdn>', $('Set the internal-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings';
    var paramPath = options.path + '/' + 'dnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    paramPath = options.path + '/' + 'appliedDnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.appliedDnsServers) {
      if (options.parse && options.appliedDnsServers) {
        options.appliedDnsServers = JSON.parse(options.appliedDnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.appliedDnsServers}]);
    }
    paramPath = options.path + '/' + 'internalDnsNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalDnsNameLabel) {
      if (options.parse && options.internalDnsNameLabel) {
        options.internalDnsNameLabel = JSON.parse(options.internalDnsNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalDnsNameLabel}]);
    }
    paramPath = options.path + '/' + 'internalFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalFqdn) {
      if (options.parse && options.internalFqdn) {
        options.internalFqdn = JSON.parse(options.internalFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings1 = catparametersCreateOrUpdateVirtualNetworksDnsSettings1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDnsSettings1 = parametersCreateOrUpdateVirtualNetworksDnsSettings1.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDnsSettings1.command('remove')
  .description($('Remove dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               ""\r\n             ],\r\n             "appliedDnsServers":[\r\n               ""\r\n             ],\r\n             "internalDnsNameLabel":"",\r\n             "internalFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--dns-servers', $('Remove the dns-servers value.'))
  .option('--applied-dns-servers', $('Remove the applied-dns-servers value.'))
  .option('--internal-dns-name-label', $('Remove the internal-dns-name-label value.'))
  .option('--internal-fqdn', $('Remove the internal-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings';
    var anySubItem = false || options.dnsServers || options.appliedDnsServers || options.internalDnsNameLabel || options.internalFqdn;
    if (anySubItem) {
      var subItemPath = null;
      if (options.dnsServers) {
        subItemPath = options.path + '/dnsServers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.appliedDnsServers) {
        subItemPath = options.path + '/appliedDnsServers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalDnsNameLabel) {
        subItemPath = options.path + '/internalDnsNameLabel';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.internalFqdn) {
        subItemPath = options.path + '/internalFqdn';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add dns-settings
  var catparametersCreateOrUpdateVirtualNetworksDnsSettings2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsSettings2 = catparametersCreateOrUpdateVirtualNetworksDnsSettings2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDnsSettings2 = parametersCreateOrUpdateVirtualNetworksDnsSettings2.category('dns-settings')
  .description($('Commands to set/remove/add dns-settings of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDnsSettings2.command('add')
  .description($('Add dns-settings in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsSettings" : {\r\n             "dnsServers":[\r\n               ""\r\n             ],\r\n             "appliedDnsServers":[\r\n               ""\r\n             ],\r\n             "internalDnsNameLabel":"",\r\n             "internalFqdn":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--dns-servers <dnsServers>', $('Add the dns-servers value.'))
  .option('--applied-dns-servers <appliedDnsServers>', $('Add the applied-dns-servers value.'))
  .option('--internal-dns-name-label <internalDnsNameLabel>', $('Add the internal-dns-name-label value.'))
  .option('--internal-fqdn <internalFqdn>', $('Add the internal-fqdn value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings' + '/' + 'dnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.dnsServers) {
      if (options.parse && options.dnsServers) {
        options.dnsServers = JSON.parse(options.dnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dnsServers}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings' + '/' + 'appliedDnsServers';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.appliedDnsServers) {
      if (options.parse && options.appliedDnsServers) {
        options.appliedDnsServers = JSON.parse(options.appliedDnsServers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.appliedDnsServers}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings' + '/' + 'internalDnsNameLabel';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalDnsNameLabel) {
      if (options.parse && options.internalDnsNameLabel) {
        options.internalDnsNameLabel = JSON.parse(options.internalDnsNameLabel);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalDnsNameLabel}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings' + '/' + 'internalFqdn';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.internalFqdn) {
      if (options.parse && options.internalFqdn) {
        options.internalFqdn = JSON.parse(options.internalFqdn);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.internalFqdn}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers0 = catparametersCreateOrUpdateVirtualNetworksDnsServers0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksDnsServers0 = parametersCreateOrUpdateVirtualNetworksDnsServers0.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksDnsServers0.command('set')
  .description($('Set dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers1 = catparametersCreateOrUpdateVirtualNetworksDnsServers1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksDnsServers1 = parametersCreateOrUpdateVirtualNetworksDnsServers1.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksDnsServers1.command('remove')
  .description($('Remove dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add dns-servers
  var catparametersCreateOrUpdateVirtualNetworksDnsServers2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksDnsServers2 = catparametersCreateOrUpdateVirtualNetworksDnsServers2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksDnsServers2 = parametersCreateOrUpdateVirtualNetworksDnsServers2.category('dns-servers')
  .description($('Commands to set/remove/add dns-servers of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksDnsServers2.command('add')
  .description($('Add dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "dnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/dnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set applied-dns-servers
  var catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAppliedDnsServers0 = catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksAppliedDnsServers0 = parametersCreateOrUpdateVirtualNetworksAppliedDnsServers0.category('applied-dns-servers')
  .description($('Commands to set/remove/add applied-dns-servers of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksAppliedDnsServers0.command('set')
  .description($('Set applied-dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "appliedDnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/appliedDnsServers' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove applied-dns-servers
  var catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAppliedDnsServers1 = catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksAppliedDnsServers1 = parametersCreateOrUpdateVirtualNetworksAppliedDnsServers1.category('applied-dns-servers')
  .description($('Commands to set/remove/add applied-dns-servers of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksAppliedDnsServers1.command('remove')
  .description($('Remove applied-dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "appliedDnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interfaces-index <network-interfaces-index>', $('Indexer: network-interfaces-index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/appliedDnsServers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add applied-dns-servers
  var catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksAppliedDnsServers2 = catparametersCreateOrUpdateVirtualNetworksAppliedDnsServers2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksAppliedDnsServers2 = parametersCreateOrUpdateVirtualNetworksAppliedDnsServers2.category('applied-dns-servers')
  .description($('Commands to set/remove/add applied-dns-servers of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksAppliedDnsServers2.command('add')
  .description($('Add applied-dns-servers in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "appliedDnsServers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/networkSecurityGroup/networkInterfaces/' + options.networkInterfacesIndex + '/dnsSettings/appliedDnsServers' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets0 = catparametersCreateOrUpdateVirtualNetworksSubnets0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksSubnets0 = parametersCreateOrUpdateVirtualNetworksSubnets0.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksSubnets0.command('set')
  .description($('Set subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets1 = catparametersCreateOrUpdateVirtualNetworksSubnets1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnets1 = parametersCreateOrUpdateVirtualNetworksSubnets1.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnets1.command('remove')
  .description($('Remove subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets2 = catparametersCreateOrUpdateVirtualNetworksSubnets2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnets2 = parametersCreateOrUpdateVirtualNetworksSubnets2.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnets2.command('add')
  .description($('Add subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set route-table
  var catparametersCreateOrUpdateVirtualNetworksRouteTable0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRouteTable0 = catparametersCreateOrUpdateVirtualNetworksRouteTable0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksRouteTable0 = parametersCreateOrUpdateVirtualNetworksRouteTable0.category('route-table')
  .description($('Commands to set/remove/add route-table of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksRouteTable0.command('set')
  .description($('Set route-table in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routeTable" : {\r\n             "etag":"",\r\n             "routes":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "nextHopType":"",\r\n                 "nextHopIpAddress":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "subnets":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":{\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "privateIPAddress":"",\r\n                               "privateIPAllocationMethod":"",\r\n                               "subnet":null,\r\n                               "publicIPAddress":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             },\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":null,\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--routes <routes>', $('Set the routes value.'))
  .option('--subnets <subnets>', $('Set the subnets value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable';
    var paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'routes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routes) {
      if (options.parse && options.routes) {
        options.routes = JSON.parse(options.routes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routes}]);
    }
    paramPath = options.path + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove route-table
  var catparametersCreateOrUpdateVirtualNetworksRouteTable1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRouteTable1 = catparametersCreateOrUpdateVirtualNetworksRouteTable1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksRouteTable1 = parametersCreateOrUpdateVirtualNetworksRouteTable1.category('route-table')
  .description($('Commands to set/remove/add route-table of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksRouteTable1.command('remove')
  .description($('Remove route-table in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routeTable" : {\r\n             "etag":"",\r\n             "routes":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "nextHopType":"",\r\n                 "nextHopIpAddress":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "subnets":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":{\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "privateIPAddress":"",\r\n                               "privateIPAllocationMethod":"",\r\n                               "subnet":null,\r\n                               "publicIPAddress":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             },\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":null,\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--routes', $('Remove the routes value.'))
  .option('--subnets', $('Remove the subnets value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable';
    var anySubItem = false || options.etag || options.routes || options.subnets || options.provisioningState || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.routes) {
        subItemPath = options.path + '/routes';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnets) {
        subItemPath = options.path + '/subnets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add route-table
  var catparametersCreateOrUpdateVirtualNetworksRouteTable2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRouteTable2 = catparametersCreateOrUpdateVirtualNetworksRouteTable2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksRouteTable2 = parametersCreateOrUpdateVirtualNetworksRouteTable2.category('route-table')
  .description($('Commands to set/remove/add route-table of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksRouteTable2.command('add')
  .description($('Add route-table in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routeTable" : {\r\n             "etag":"",\r\n             "routes":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "nextHopType":"",\r\n                 "nextHopIpAddress":"",\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "subnets":[\r\n               {\r\n                 "name":"",\r\n                 "etag":"",\r\n                 "addressPrefix":"",\r\n                 "networkSecurityGroup":{\r\n                   "etag":"",\r\n                   "securityRules":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "description":"",\r\n                       "protocol":"",\r\n                       "sourcePortRange":"",\r\n                       "destinationPortRange":"",\r\n                       "sourceAddressPrefix":"",\r\n                       "destinationAddressPrefix":"",\r\n                       "access":"",\r\n                       "priority":null,\r\n                       "direction":"",\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "defaultSecurityRules":[\r\n           null\r\n                   ],\r\n                   "networkInterfaces":[\r\n                     {\r\n                       "etag":"",\r\n                       "virtualMachine":{\r\n                         "id":""\r\n                       },\r\n                       "networkSecurityGroup":null,\r\n                       "ipConfigurations":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "loadBalancerBackendAddressPools":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "backendIPConfigurations":[\r\n           null\r\n                               ],\r\n                               "loadBalancingRules":[\r\n           null\r\n                               ],\r\n                               "outboundNatRule":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "loadBalancerInboundNatRules":[\r\n                             {\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "frontendIPConfiguration":null,\r\n                               "backendIPConfiguration":null,\r\n                               "protocol":"",\r\n                               "frontendPort":null,\r\n                               "backendPort":null,\r\n                               "idleTimeoutInMinutes":null,\r\n                               "enableFloatingIP":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             }\r\n                           ],\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":{\r\n                             "etag":"",\r\n                             "publicIPAllocationMethod":"",\r\n                             "ipConfiguration":{\r\n                               "name":"",\r\n                               "etag":"",\r\n                               "privateIPAddress":"",\r\n                               "privateIPAllocationMethod":"",\r\n                               "subnet":null,\r\n                               "publicIPAddress":null,\r\n                               "provisioningState":"",\r\n                               "id":""\r\n                             },\r\n                             "dnsSettings":{\r\n                               "domainNameLabel":"",\r\n                               "fqdn":"",\r\n                               "reverseFqdn":""\r\n                             },\r\n                             "ipAddress":"",\r\n                             "idleTimeoutInMinutes":null,\r\n                             "resourceGuid":"",\r\n                             "provisioningState":"",\r\n                             "id":"",\r\n                             "name":null,\r\n                             "type":null,\r\n                             "location":"",\r\n                             "tags":{\r\n                             }\r\n                           },\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "dnsSettings":{\r\n                         "dnsServers":[\r\n                           ""\r\n                         ],\r\n                         "appliedDnsServers":[\r\n                           ""\r\n                         ],\r\n                         "internalDnsNameLabel":"",\r\n                         "internalFqdn":""\r\n                       },\r\n                       "macAddress":"",\r\n                       "primary":null,\r\n                       "enableIPForwarding":null,\r\n                       "resourceGuid":"",\r\n                       "provisioningState":"",\r\n                       "id":"",\r\n                       "name":null,\r\n                       "type":null,\r\n                       "location":"",\r\n                       "tags":{\r\n                       }\r\n                     }\r\n                   ],\r\n                   "subnets":[\r\n           null\r\n                   ],\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 },\r\n                 "routeTable":null,\r\n                 "ipConfigurations":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":""\r\n               }\r\n             ],\r\n             "provisioningState":"",\r\n             "id":"",\r\n             "name":null,\r\n             "type":null,\r\n             "location":"",\r\n             "tags":{\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--routes <routes>', $('Add the routes value.'))
  .option('--subnets <subnets>', $('Add the subnets value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--type <type>', $('Add the type value.'))
  .option('--location <location>', $('Add the location value.'))
  .option('--tags <tags>', $('Add the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'routes';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.routes) {
      if (options.parse && options.routes) {
        options.routes = JSON.parse(options.routes);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.routes}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'subnets';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.subnets) {
      if (options.parse && options.subnets) {
        options.subnets = JSON.parse(options.subnets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnets}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'type';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.type) {
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'location';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.location) {
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable' + '/' + 'tags';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.tags) {
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set routes
  var catparametersCreateOrUpdateVirtualNetworksRoutes0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRoutes0 = catparametersCreateOrUpdateVirtualNetworksRoutes0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksRoutes0 = parametersCreateOrUpdateVirtualNetworksRoutes0.category('routes')
  .description($('Commands to set/remove/add routes of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksRoutes0.command('set')
  .description($('Set routes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routes" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "nextHopType":"",\r\n             "nextHopIpAddress":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--etag <etag>', $('Set the etag value.'))
  .option('--address-prefix <addressPrefix>', $('Set the address-prefix value.'))
  .option('--next-hop-type <nextHopType>', $('Set the next-hop-type value.'))
  .option('--next-hop-ip-address <nextHopIpAddress>', $('Set the next-hop-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = options.path + '/' + 'addressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefix) {
      if (options.parse && options.addressPrefix) {
        options.addressPrefix = JSON.parse(options.addressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefix}]);
    }
    paramPath = options.path + '/' + 'nextHopType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.nextHopType) {
      if (options.parse && options.nextHopType) {
        options.nextHopType = JSON.parse(options.nextHopType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.nextHopType}]);
    }
    paramPath = options.path + '/' + 'nextHopIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.nextHopIpAddress) {
      if (options.parse && options.nextHopIpAddress) {
        options.nextHopIpAddress = JSON.parse(options.nextHopIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.nextHopIpAddress}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove routes
  var catparametersCreateOrUpdateVirtualNetworksRoutes1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRoutes1 = catparametersCreateOrUpdateVirtualNetworksRoutes1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksRoutes1 = parametersCreateOrUpdateVirtualNetworksRoutes1.category('routes')
  .description($('Commands to set/remove/add routes of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksRoutes1.command('remove')
  .description($('Remove routes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routes" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "nextHopType":"",\r\n             "nextHopIpAddress":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--etag', $('Remove the etag value.'))
  .option('--address-prefix', $('Remove the address-prefix value.'))
  .option('--next-hop-type', $('Remove the next-hop-type value.'))
  .option('--next-hop-ip-address', $('Remove the next-hop-ip-address value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.etag || options.addressPrefix || options.nextHopType || options.nextHopIpAddress || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.etag) {
        subItemPath = options.path + '/etag';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.addressPrefix) {
        subItemPath = options.path + '/addressPrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.nextHopType) {
        subItemPath = options.path + '/nextHopType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.nextHopIpAddress) {
        subItemPath = options.path + '/nextHopIpAddress';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add routes
  var catparametersCreateOrUpdateVirtualNetworksRoutes2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksRoutes2 = catparametersCreateOrUpdateVirtualNetworksRoutes2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksRoutes2 = parametersCreateOrUpdateVirtualNetworksRoutes2.category('routes')
  .description($('Commands to set/remove/add routes of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksRoutes2.command('add')
  .description($('Add routes in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "routes" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "nextHopType":"",\r\n             "nextHopIpAddress":"",\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .option('--name <name>', $('Add the name value.'))
  .option('--etag <etag>', $('Add the etag value.'))
  .option('--address-prefix <addressPrefix>', $('Add the address-prefix value.'))
  .option('--next-hop-type <nextHopType>', $('Add the next-hop-type value.'))
  .option('--next-hop-ip-address <nextHopIpAddress>', $('Add the next-hop-ip-address value.'))
  .option('--provisioning-state <provisioningState>', $('Add the provisioning-state value.'))
  .option('--id <id>', $('Add the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'name';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.name) {
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'etag';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.etag) {
      if (options.parse && options.etag) {
        options.etag = JSON.parse(options.etag);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.etag}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'addressPrefix';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.addressPrefix) {
      if (options.parse && options.addressPrefix) {
        options.addressPrefix = JSON.parse(options.addressPrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.addressPrefix}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'nextHopType';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.nextHopType) {
      if (options.parse && options.nextHopType) {
        options.nextHopType = JSON.parse(options.nextHopType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.nextHopType}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'nextHopIpAddress';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.nextHopIpAddress) {
      if (options.parse && options.nextHopIpAddress) {
        options.nextHopIpAddress = JSON.parse(options.nextHopIpAddress);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.nextHopIpAddress}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'provisioningState';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.provisioningState) {
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = '/subnets/' + options.subnetsIndex + '/routeTable/routes' + (options.index ? ('/' + options.index) : '') + '/' + 'id';
    cli.output.verbose('================================================');
    cli.output.verbose('JSON Parameters Path:' + paramPath);
    cli.output.verbose('================================================');
    if (options.id) {
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets0 = catparametersCreateOrUpdateVirtualNetworksSubnets0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksSubnets0 = parametersCreateOrUpdateVirtualNetworksSubnets0.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksSubnets0.command('set')
  .description($('Set subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets1 = catparametersCreateOrUpdateVirtualNetworksSubnets1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksSubnets1 = parametersCreateOrUpdateVirtualNetworksSubnets1.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksSubnets1.command('remove')
  .description($('Remove subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add subnets
  var catparametersCreateOrUpdateVirtualNetworksSubnets2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksSubnets2 = catparametersCreateOrUpdateVirtualNetworksSubnets2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksSubnets2 = parametersCreateOrUpdateVirtualNetworksSubnets2.category('subnets')
  .description($('Commands to set/remove/add subnets of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksSubnets2.command('add')
  .description($('Add subnets in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "subnets" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "addressPrefix":"",\r\n             "networkSecurityGroup":{\r\n               "etag":"",\r\n               "securityRules":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "description":"",\r\n                   "protocol":"",\r\n                   "sourcePortRange":"",\r\n                   "destinationPortRange":"",\r\n                   "sourceAddressPrefix":"",\r\n                   "destinationAddressPrefix":"",\r\n                   "access":"",\r\n                   "priority":null,\r\n                   "direction":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "defaultSecurityRules":[\r\n           null\r\n               ],\r\n               "networkInterfaces":[\r\n                 {\r\n                   "etag":"",\r\n                   "virtualMachine":{\r\n                     "id":""\r\n                   },\r\n                   "networkSecurityGroup":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "etag":"",\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "backendIPConfigurations":[\r\n           null\r\n                           ],\r\n                           "loadBalancingRules":[\r\n           null\r\n                           ],\r\n                           "outboundNatRule":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatRules":[\r\n                         {\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "frontendIPConfiguration":null,\r\n                           "backendIPConfiguration":null,\r\n                           "protocol":"",\r\n                           "frontendPort":null,\r\n                           "backendPort":null,\r\n                           "idleTimeoutInMinutes":null,\r\n                           "enableFloatingIP":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "privateIPAddress":"",\r\n                       "privateIPAllocationMethod":"",\r\n                       "subnet":null,\r\n                       "publicIPAddress":{\r\n                         "etag":"",\r\n                         "publicIPAllocationMethod":"",\r\n                         "ipConfiguration":{\r\n                           "name":"",\r\n                           "etag":"",\r\n                           "privateIPAddress":"",\r\n                           "privateIPAllocationMethod":"",\r\n                           "subnet":null,\r\n                           "publicIPAddress":null,\r\n                           "provisioningState":"",\r\n                           "id":""\r\n                         },\r\n                         "dnsSettings":{\r\n                           "domainNameLabel":"",\r\n                           "fqdn":"",\r\n                           "reverseFqdn":""\r\n                         },\r\n                         "ipAddress":"",\r\n                         "idleTimeoutInMinutes":null,\r\n                         "resourceGuid":"",\r\n                         "provisioningState":"",\r\n                         "id":"",\r\n                         "name":null,\r\n                         "type":null,\r\n                         "location":"",\r\n                         "tags":{\r\n                         }\r\n                       },\r\n                       "provisioningState":"",\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "dnsSettings":{\r\n                     "dnsServers":[\r\n                       ""\r\n                     ],\r\n                     "appliedDnsServers":[\r\n                       ""\r\n                     ],\r\n                     "internalDnsNameLabel":"",\r\n                     "internalFqdn":""\r\n                   },\r\n                   "macAddress":"",\r\n                   "primary":null,\r\n                   "enableIPForwarding":null,\r\n                   "resourceGuid":"",\r\n                   "provisioningState":"",\r\n                   "id":"",\r\n                   "name":null,\r\n                   "type":null,\r\n                   "location":"",\r\n                   "tags":{\r\n                   }\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "resourceGuid":"",\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "routeTable":{\r\n               "etag":"",\r\n               "routes":[\r\n                 {\r\n                   "name":"",\r\n                   "etag":"",\r\n                   "addressPrefix":"",\r\n                   "nextHopType":"",\r\n                   "nextHopIpAddress":"",\r\n                   "provisioningState":"",\r\n                   "id":""\r\n                 }\r\n               ],\r\n               "subnets":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":"",\r\n               "name":null,\r\n               "type":null,\r\n               "location":"",\r\n               "tags":{\r\n               }\r\n             },\r\n             "ipConfigurations":[\r\n           null\r\n             ],\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters set ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations0 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var setparametersCreateOrUpdateVirtualNetworksIpConfigurations0 = parametersCreateOrUpdateVirtualNetworksIpConfigurations0.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  setparametersCreateOrUpdateVirtualNetworksIpConfigurations0.command('set')
  .description($('Set ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/subnets/' + options.subnetsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    if (options.value) {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //create-or-update-parameters remove ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations1 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('create-or-update-parameters')
  .description($('Commands to manage parameter for your virtual-networks.'));
  var removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1 = parametersCreateOrUpdateVirtualNetworksIpConfigurations1.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  removeparametersCreateOrUpdateVirtualNetworksIpConfigurations1.command('remove')
  .description($('Remove ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--subnets-index <subnets-index>', $('Indexer: subnets-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/subnets/' + options.subnetsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //create-or-update-parameters add ip-configurations
  var catparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = cli.category('virtual-networks');
  var parametersCreateOrUpdateVirtualNetworksIpConfigurations2 = catparametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('create-or-update-parameters')
  .description($('Commands to manage the parameter input file for your virtual-networks.'));
  var addparametersCreateOrUpdateVirtualNetworksIpConfigurations2 = parametersCreateOrUpdateVirtualNetworksIpConfigurations2.category('ip-configurations')
  .description($('Commands to set/remove/add ip-configurations of virtual-networks in create-or-update-parameters file.'));
  addparametersCreateOrUpdateVirtualNetworksIpConfigurations2.command('add')
  .description($('Add ip-configurations in create-or-update-parameters string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "etag":"",\r\n             "privateIPAddress":"",\r\n             "privateIPAllocationMethod":"",\r\n             "subnet":{\r\n               "name":"",\r\n               "etag":"",\r\n               "addressPrefix":"",\r\n               "networkSecurityGroup":{\r\n                 "etag":"",\r\n                 "securityRules":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "description":"",\r\n                     "protocol":"",\r\n                     "sourcePortRange":"",\r\n                     "destinationPortRange":"",\r\n                     "sourceAddressPrefix":"",\r\n                     "destinationAddressPrefix":"",\r\n                     "access":"",\r\n                     "priority":null,\r\n                     "direction":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "defaultSecurityRules":[\r\n           null\r\n                 ],\r\n                 "networkInterfaces":[\r\n                   {\r\n                     "etag":"",\r\n                     "virtualMachine":{\r\n                       "id":""\r\n                     },\r\n                     "networkSecurityGroup":null,\r\n                     "ipConfigurations":[\r\n                       {\r\n                         "name":"",\r\n                         "etag":"",\r\n                         "loadBalancerBackendAddressPools":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "backendIPConfigurations":[\r\n           null\r\n                             ],\r\n                             "loadBalancingRules":[\r\n           null\r\n                             ],\r\n                             "outboundNatRule":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "loadBalancerInboundNatRules":[\r\n                           {\r\n                             "name":"",\r\n                             "etag":"",\r\n                             "frontendIPConfiguration":null,\r\n                             "backendIPConfiguration":null,\r\n                             "protocol":"",\r\n                             "frontendPort":null,\r\n                             "backendPort":null,\r\n                             "idleTimeoutInMinutes":null,\r\n                             "enableFloatingIP":null,\r\n                             "provisioningState":"",\r\n                             "id":""\r\n                           }\r\n                         ],\r\n                         "privateIPAddress":"",\r\n                         "privateIPAllocationMethod":"",\r\n                         "subnet":null,\r\n                         "publicIPAddress":{\r\n                           "etag":"",\r\n                           "publicIPAllocationMethod":"",\r\n                           "ipConfiguration":null,\r\n                           "dnsSettings":{\r\n                             "domainNameLabel":"",\r\n                             "fqdn":"",\r\n                             "reverseFqdn":""\r\n                           },\r\n                           "ipAddress":"",\r\n                           "idleTimeoutInMinutes":null,\r\n                           "resourceGuid":"",\r\n                           "provisioningState":"",\r\n                           "id":"",\r\n                           "name":null,\r\n                           "type":null,\r\n                           "location":"",\r\n                           "tags":{\r\n                           }\r\n                         },\r\n                         "provisioningState":"",\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "dnsSettings":{\r\n                       "dnsServers":[\r\n                         ""\r\n                       ],\r\n                       "appliedDnsServers":[\r\n                         ""\r\n                       ],\r\n                       "internalDnsNameLabel":"",\r\n                       "internalFqdn":""\r\n                     },\r\n                     "macAddress":"",\r\n                     "primary":null,\r\n                     "enableIPForwarding":null,\r\n                     "resourceGuid":"",\r\n                     "provisioningState":"",\r\n                     "id":"",\r\n                     "name":null,\r\n                     "type":null,\r\n                     "location":"",\r\n                     "tags":{\r\n                     }\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "resourceGuid":"",\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "routeTable":{\r\n                 "etag":"",\r\n                 "routes":[\r\n                   {\r\n                     "name":"",\r\n                     "etag":"",\r\n                     "addressPrefix":"",\r\n                     "nextHopType":"",\r\n                     "nextHopIpAddress":"",\r\n                     "provisioningState":"",\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "subnets":[\r\n           null\r\n                 ],\r\n                 "provisioningState":"",\r\n                 "id":"",\r\n                 "name":null,\r\n                 "type":null,\r\n                 "location":"",\r\n                 "tags":{\r\n                 }\r\n               },\r\n               "ipConfigurations":[\r\n           null\r\n               ],\r\n               "provisioningState":"",\r\n               "id":""\r\n             },\r\n             "publicIPAddress":null,\r\n             "provisioningState":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss get/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss create-or-update-parameters * generate/set/remove/add\' commands \r\n         are used to configure the input parameter file. The \'vmss create-or-update\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--key <key>', $('The JSON key.'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the input value string to a JSON object.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options));
    if (options.parse && options.value) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'add';
    options.path = '/subnets/' + options.subnetsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '') + '/' + options.key;
    cli.output.verbose('options.path = ' + options.path);
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });


/*
  VirtualNetworks Delete
  --resource-group-name
  --virtual-network-name
*/
  var virtualNetworksDelete = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksDelete.command('delete [resource-group-name] [virtual-network-name]')
  .description($('Commands to manage your virtual networks by the delete method.'))
  .usage('[options] <resource-group-name> <virtual-network-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-name <virtual-network-name>', $('virtual-network-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkName = ' + virtualNetworkName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.deleteMethod(resourceGroupName, virtualNetworkName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworks Get
  --resource-group-name
  --virtual-network-name
  --expand
*/
  var virtualNetworksGet = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksGet.command('get [resource-group-name] [virtual-network-name] [expand]')
  .description($('Commands to manage your virtual networks by the get method.'))
  .usage('[options] <resource-group-name> <virtual-network-name> <expand>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--virtual-network-name <virtual-network-name>', $('virtual-network-name'))
  .option('--expand <expand>', $('expand'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, virtualNetworkName, expand, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    cli.output.verbose('virtualNetworkName = ' + virtualNetworkName);
    cli.output.verbose('expand = ' + expand);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.get(resourceGroupName, virtualNetworkName, expand, _);
    cli.output.json(result);
  });
/*
  VirtualNetworks List
  --resource-group-name
*/
  var virtualNetworksList = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksList.command('list [resource-group-name]')
  .description($('Commands to manage your virtual networks by the list method.'))
  .usage('[options] <resource-group-name>')
  .option('-g, --resource-group-name <resource-group-name>', $('resource-group-name'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(resourceGroupName, options, _) {
    cli.output.verbose('resourceGroupName = ' + resourceGroupName);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.list(resourceGroupName, _);
    cli.output.json(result);
  });
/*
  VirtualNetworks ListAll
*/
  var virtualNetworksListAll = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksListAll.command('list-all')
  .description($('Commands to manage your virtual networks by the list-all method.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(options, _) {
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.listAll(_);
    cli.output.json(result);
  });
/*
  VirtualNetworks ListAllNext
  --next-page-link
*/
  var virtualNetworksListAllNext = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksListAllNext.command('list-all-next [next-page-link]')
  .description($('Commands to manage your virtual networks by the list-all-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.listAllNext(nextPageLink, _);
    cli.output.json(result);
  });
/*
  VirtualNetworks ListNext
  --next-page-link
*/
  var virtualNetworksListNext = cli.category('virtual-networks')
  .description($('Commands to manage your virtual networks.  '));
  virtualNetworksListNext.command('list-next [next-page-link]')
  .description($('Commands to manage your virtual networks by the list-next method.'))
  .usage('[options] <next-page-link>')
  .option('--next-page-link <next-page-link>', $('next-page-link'))
  .option('--parameter-file <parameter-file>', $('the input parameter file'))
  .option('-s, --subscription <subscription>', $('the subscription identifier'))
  .execute(function(nextPageLink, options, _) {
    cli.output.verbose('nextPageLink = ' + nextPageLink);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkManagementClient(subscription);
    var result = networkManagementClient.virtualNetworks.listNext(nextPageLink, _);
    cli.output.json(result);
  });


};
